<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>sen</title>
  
  
  <link href="http://senye.ink/atom.xml" rel="self"/>
  
  <link href="http://senye.ink/"/>
  <updated>2021-07-09T12:38:09.686Z</updated>
  <id>http://senye.ink/</id>
  
  <author>
    <name>zhangsen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>day15</title>
    <link href="http://senye.ink/2021/07/09/day15/"/>
    <id>http://senye.ink/2021/07/09/day15/</id>
    <published>2021-07-09T12:36:55.460Z</published>
    <updated>2021-07-09T12:38:09.686Z</updated>
    
    <content type="html"><![CDATA[<p>clone():把原对象的属性值复制到新对象中 并且返回到新对象</p><p>finalize()：通知系统进行垃圾回收</p><p>getClass（）：返回实际创建类的类型</p><p>hashcode():：返回对象的哈希码值</p><p>toString（）：返回对象拼接的地址值</p><h4 id="String-类"><a href="#String-类" class="headerlink" title="String 类"></a>String 类</h4><p>最终类 —没有子类</p><p>java中所有的字符串常量 都是String类的对象</p><p>String类对象的内容存储在底层的无法改变的字符数组中，String类创建</p><h4 id="重要方法"><a href="#重要方法" class="headerlink" title="重要方法"></a>重要方法</h4><p>1.charAt():根据指定的下标返回对应的字符</p><p>2.length()：返回字符串对象的长度</p><p>3.toCharArray():将字符串对象内容转成新的字符数组进行返回</p><p>4.new String(char[] cs,int offset,int count)—可以将字符数组的部分内容转成新的字符串对象来进行返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.tedu.string;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo2</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> <span class="comment">//</span></span><br><span class="line"> String str = <span class="string">&quot;asjcvh&quot;</span>;</span><br><span class="line"> <span class="comment">//给定字符串的下标返回对应的字符</span></span><br><span class="line"> <span class="comment">//字符串的下标对应底层存储的字符数组的下标（从0开始）</span></span><br><span class="line"> <span class="comment">//System.out.println(str.charAt(3));</span></span><br><span class="line"> <span class="comment">//遍历字符串</span></span><br><span class="line"> <span class="comment">//字符串对象调用length()返回字符串的长度</span></span><br><span class="line"> <span class="comment">//数组对象调用length属性返回数组长度</span></span><br><span class="line"> <span class="comment">/* for(int i=0;i&lt;str.length();i++)&#123;</span></span><br><span class="line"><span class="comment"> System.out.println(str.charAt(i));</span></span><br><span class="line"><span class="comment"> &#125;*/</span></span><br><span class="line"> <span class="comment">//将字符串对象内容转成新的字符数组</span></span><br><span class="line"> <span class="comment">//Ctrl+Alt+v---把返回值直接展示</span></span><br><span class="line"> <span class="keyword">char</span>[] cs = str.toCharArray();</span><br><span class="line"> <span class="comment">//先把字符数组内容转成新的字符串对象</span></span><br><span class="line"> <span class="comment">//String s = new String(cs);</span></span><br><span class="line"> <span class="comment">//可以把字符数组的部分内容转成新的字符串对象</span></span><br><span class="line"> String s = <span class="keyword">new</span> String(cs, <span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line"> <span class="comment">//展示数组内容</span></span><br><span class="line"> System.out.println(Arrays.toString(cs));</span><br><span class="line"> System.out.println(s);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>equals()</p><p>  1.根据对象地址值来比较两个对象是否相等</p><p>  2.想根据对象地址值和对象属性值综合判断两个对象是否相等需要重写equal方法（判断对象地址值是否相同  判断参数对象是否为null  判断两个对象的类型是否一致  判断对象的属性是否一致）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.tedu.object;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p1=<span class="keyword">new</span> Person();</span><br><span class="line">        p1.name=<span class="keyword">null</span>;</span><br><span class="line">        p1.age=<span class="number">10</span>;</span><br><span class="line">        p1.gender=<span class="string">&#x27;女&#x27;</span>;</span><br><span class="line">        Person p2=<span class="keyword">new</span> Person();</span><br><span class="line">        p2.name=<span class="keyword">null</span>;</span><br><span class="line">        p2.age=<span class="number">10</span>;</span><br><span class="line">        p2.gender=<span class="string">&#x27;女&#x27;</span>;</span><br><span class="line">        System.out.println(p1.equals(p2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">char</span> gender;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == obj) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.getClass() != obj.getClass()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Person p = (Person) obj;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.age != p.age) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.gender != p.gender) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.name == p.name || <span class="keyword">this</span>.name != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.name.equals(p.name)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="最终类–没有子类"><a href="#最终类–没有子类" class="headerlink" title="最终类–没有子类"></a>最终类–没有子类</h4><p>java中所有的字符串常量都是String类的对象</p><p> String类对象的内容存储在底层的无法改变的字符数组中，</p><p>String类创建出的对象值也就无法改变 java中所有的常量存储在方法区的运行时常量池（字符串常量存的是引用，其他的常量存储是值） 如果给定的字符串常量内容和之前的出现的内容一致，公用同一个方法区常量引用—共享</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.tedu.string;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo1</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> <span class="comment">//String str引用指向&quot;abc&quot;</span></span><br><span class="line"> <span class="comment">/* String str=&quot;abc&quot;;</span></span><br><span class="line"><span class="comment"> System.out.println(str);</span></span><br><span class="line"><span class="comment"> //改变了指向,String str引用指向&quot;def&quot;</span></span><br><span class="line"><span class="comment"> str=&quot;def&quot;;</span></span><br><span class="line"><span class="comment"> System.out.println(str);*/</span></span><br><span class="line"> <span class="comment">//s1指向方法区</span></span><br><span class="line"> String s1=<span class="string">&quot;ab&quot;</span>;</span><br><span class="line"> <span class="comment">//s2指向堆</span></span><br><span class="line"> String s2=<span class="keyword">new</span> String(<span class="string">&quot;ab&quot;</span>);</span><br><span class="line"> <span class="comment">//s3给定的字符串常量的内容和s1给定内容一致，所以公用一个方法区的常量引用，所以地址值一致</span></span><br><span class="line"> String s3=<span class="string">&quot;ab&quot;</span>;</span><br><span class="line"> <span class="comment">//如果参与运算的都是常量，那么在编译时期就可以进行优化直接进行运算把运算之后的结果来进行赋</span></span><br><span class="line">值</span><br><span class="line"> <span class="comment">//编译优化先计算---“a”+&quot;b&quot;进行拼接的结果是&quot;ab&quot;再把这个结果值赋值给s4</span></span><br><span class="line"> <span class="comment">//s4指向方法区（和s1指向一致）</span></span><br><span class="line"> String s4=<span class="string">&quot;a&quot;</span>+<span class="string">&quot;b&quot;</span>;</span><br><span class="line"> String s5=<span class="string">&quot;a&quot;</span>;</span><br><span class="line"> <span class="comment">//s5=s5+&quot;b&quot;;</span></span><br><span class="line"> <span class="comment">//String类的对象底层由不可改变的字符数组来存储所以对象的值不能改变---不能做拼接</span></span><br><span class="line"> <span class="comment">//String类借由别的类来做内容的拼接</span></span><br><span class="line"> <span class="comment">//底层实现---s5=new StringBuilder(&quot;a&quot;).append(&quot;b&quot;).toString();</span></span><br><span class="line"> <span class="comment">//toString方法底层是创建一个新的String类对象来返回</span></span><br><span class="line"> <span class="comment">//s5指向堆</span></span><br><span class="line"> s5+=<span class="string">&quot;b&quot;</span>;</span><br><span class="line"> <span class="comment">//s1和s2指向不同内存分区所以地址值不相同</span></span><br><span class="line"> System.out.println(s1==s2);<span class="comment">//false</span></span><br><span class="line"> System.out.println(s1==s3);<span class="comment">//true</span></span><br><span class="line"> System.out.println(s1==s4);<span class="comment">//true</span></span><br><span class="line"> System.out.println(s1==s5);<span class="comment">//false</span></span><br><span class="line"> <span class="comment">//s2指向堆，s5指向堆但是开辟两个不同的堆内存所以地址值不一样</span></span><br><span class="line"> System.out.println(s2==s5);<span class="comment">//false</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>StringBulider和StringBuffer</p><p>StringBuffer : 从jdk1.0出现用于实现String类的内容的拼接，线程安全但是拼接效率较低。</p><p>StringBuilder：从jdk1.5开始出现用于实现String类内容的拼接，线程不安全但是拼接效率较高。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;clone():把原对象的属性值复制到新对象中 并且返回到新对象&lt;/p&gt;
&lt;p&gt;finalize()：通知系统进行垃圾回收&lt;/p&gt;
&lt;p&gt;getClass（）：返回实际创建类的类型&lt;/p&gt;
&lt;p&gt;hashcode():：返回对象的哈希码值&lt;/p&gt;
&lt;p&gt;toString（）</summary>
      
    
    
    
    
    <category term="String 方法 最终类" scheme="http://senye.ink/tags/String-%E6%96%B9%E6%B3%95-%E6%9C%80%E7%BB%88%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>day14</title>
    <link href="http://senye.ink/2021/07/08/day14/"/>
    <id>http://senye.ink/2021/07/08/day14/</id>
    <published>2021-07-08T14:05:32.478Z</published>
    <updated>2021-07-08T14:06:55.136Z</updated>
    
    <content type="html"><![CDATA[<h1 id="复习"><a href="#复习" class="headerlink" title="复习"></a>复习</h1><p> <strong>基本语法</strong></p><p>跨平台—事先在操作系用上存放对应的jvm 讲java程序放到jvm中来运行，使得相同的java程序在不同的操作系统上得到的结果是一样的  （一次编译 到处运行）.java文件在jvm外部进行编译，把.class文件放入到jvm中来运行</p><p><strong>三大架构</strong></p><p>javase(基础)  javaee（企业）  javame</p><p>搭建语言环境</p><p>jre:java运行时环境 包含jvm和核心类库</p><p>jdk：开发时的工具包—开发环境和运行环境 包含jre+kit（工具包）</p><p><strong>编译和运行</strong></p><p>.java文件（源文件）—-编译—-.class文件（字节码文件)  编译时期（在检测java程序的语法问题）</p><p>.class文件（字节码文件） 可以 运行—结果  运行时期在检测java程序的执行逻辑</p><p>main方法—可以让类单独执行、所有java程序的入口、被jvm调用</p><p>.java文件可以定义多个类 每个类可以被编译生成对应的.class文件</p><p><strong>关键字</strong></p><p>在java中具有特殊功能的单词 53个关键字 全部都是小写 false true null 有值                                                                                                                    </p><p><strong>标识符</strong></p><p>可以自定义 一定范围之内的名称 组成范围： 各国常见文字 数字 特殊符号  </p><p>命名规则：不能出现关键字 不能以数字开头 在组成范围之内符合命名规则–合法  在合法的基础上可以遵守规范 </p><p>驼峰命名法 ：</p><p>类名、接口名 :XxxYyy</p><p>方法名 变量名：xxxYyy</p><p>常量名：XXX_YYY</p><p>包名（每级名称都是小写）</p><p>要做到见名知意</p><p>注释 ：在代码中用于解释说明的文字 单行注释 //  多行注释/* */  文档注释 </p><p>常量：程序运行过程中 值不发生改变</p><p>分类： 字面值常量 （整数 小数 字符 字符串 布尔 空）  自定义常量（用fianal修饰数据—最终值   final int a =1 ）</p><p>数据的表现形式（二进制 八进制 十进制 十六进制 进制之间可以转换）</p><p>有符号的数：java中所有数据都是以底层二进制数据的补码形式来表示( 数据的操作也是以二进制数据的补码形式来操作)   源码 反码 补码 </p><p>小数（十进制的小数转成二进制绝大部分是无限位数）</p><p>变量 ：程序运行过程中值可以发生改变  可以存储单个数据的容器  容器：变量 单个数据 所有数据类型和数组  多个数据  所有数据类型</p><p>数据类型 {基本数据类型{4类8种} 引用数据类型{数组 类 接口}}：限制数据的变化范围</p><p>byte—2<code>7~2</code>7-1(-128—-127)</p><p>short—2<code>15 ~ 2</code>15-z(-12==23768~23767)</p><p>int—  -2<code>31~2</code>31</p><p>long—  -2<code>63~2</code>63-1</p><p>char–0~65535</p><p>编码—把文字转成数字的过程 转换的规则—码表</p><p>转义字符—‘\t’  引用数据类型（数组 接口 类）</p><p>类型的定义和转换 </p><p> 数据类型  变量名 ==初始值；</p><p>数据类型 变量名；声明</p><p>变量应=初始值</p><p>变量是在哪定义在哪使用</p><p>类型转换（1.类型提升 默认从小到大 2.强制类型转换）</p><p><strong>运算符</strong></p><p>算数运算符</p><p>+（加法 字符串连接符）（整数不能除0 小数可以）%（取余符号的左边的正负决定了结果的正负）++ – （如果在操作数之前先自加再赋值  如果在操作数之后 先赋值 再自加）</p><p>赋值运算符（扩展赋值运算符底层默认有强制类型转换）</p><p>比较运算符（结果一定是布尔值）</p><p>逻辑运算符（&amp;&amp; || —-都具有短路效果）</p><p>位运算符 针对二进制数据的补码形式来做运算符 &amp;（任意整数&amp;1来判断是否为奇数还是偶数 | 任意整数 |0还是本身 ^扩展规律</p><p>移位（左移 右移 无符号右移）</p><p>三目运算符</p><p>格式—布尔表达式？表达式值1：表达式值2； 结果一定是个值</p><p>优先级都可以通过（）来解决</p><p>流程控制语句</p><p>顺序结构</p><p>选择结构（做判断 提供选项来做判断）</p><p>if语句（三种格式对应三种选择场景） 根据范围来选择</p><p>switch语句（根据值来选择）</p><p>循环结构（解决重复执行的问题）</p><p>for循环 while 循环 dowhile循环  for循环和while循环的执行流程一致 如果循环范围确定 推荐for 如果不确定 推荐while循环</p><p>dowhile循环最少执行一次</p><p>continue 在循环中跳过当次循环</p><p>return 在方法中返回值 结束方法</p><p>break 在switch中结束语句 在循环中结束循环</p><p><strong>数组</strong></p><p>可以存储对个相同数据类型的元素  的容器（支持所有的数据类型）</p><p>定义格式</p><p>数据类型 数组 数组名=new 数据类型【数组长度】；//指定数组长度</p><p>数据类型 数组名 =new 数据类型【】{值1，值2}；//指定数组元素值也就把长度确定了</p><p>数据类型 数组名={值1，值2，…..、}；//指定数组元素值也就把长度确定了</p><p>数组名【编号】—-唯一确定 的数组元素</p><p>java内存分区</p><p>栈：存储的是变量 （暂且）—java的执行过程（所有的方法加载到栈中执行）  内容使用完毕立即清除 </p><p>堆：存储的是对象 对象使用完毕等到某个时刻来回收</p><p>方法区: 存储类的信息</p><p>本地方法栈：（本地 操作系统 方法）</p><p>寄存器（pc计数器）： 表示代码执行的指令</p><p>系统默认初始值（堆里）—（byte short char int–0)  ( char—-‘\0000’  )   (long—OL)  (float—0.0F)  (double–0.0)  (boolean—false)   引用数据类型 –null</p><p>应用</p><p>遍历（普通for循环  增强for循环：把数组元素拷贝给新变量 把结果拼接成一个字符串返回 </p><p>最值  （根据参照物来比较最大值、最小值）</p><p>查找   （有序 无序)  有序 二分根据二分算法来实现 缺点 ：无序 查找数在最前面</p><p>排序（排序算法—冒泡 （相邻两个元素进行比较  一轮比完得到一个最大值）选择（ 选择一个定点元素和后续其他元素进行比较一轮比完 得到一个最小值）） Arrays.sort（—-底层提供了很多排序算法）</p><p>扩容(通过原数组和新数组之间的复制实现扩容 两种方式来实现方式适用于灵活复制元素，第二种适用于从头复制 书写方便)</p><p><strong>二维数组</strong> </p><p> 存储元素是一位数组的数组</p><p>定义格式（1.指定二维数组长度以及每一个一位数组的长度 2.指定二维数组长度就是在声明一维数组 3.指定元素值来确定二维数组的长度）</p><p>方法</p><p>把重复且有效的代码抽象形式</p><p>格式</p><p>修饰符 方法返回值类型 方法名 （参数列表）{</p><p>方法体；</p><p>return 返回值；</p><p>}</p><p>java中的方法是根据方法签名来唯一确定</p><p>方法必须被调用才执行 （方法不主动执行）</p><p>抽取方法—-方法返回值类型 参数列表</p><p><strong>重载</strong>  </p><p> 在一个类中 方法名一致 参数；列表不一致 （只和方法名 和参数列表有关系）    </p><p><strong>传值</strong></p><p>实参是基本数据类型 传递的是值的拷贝 </p><p>实参是引用数据类型 传递的是地址值的拷贝</p><p>根据拷贝的地址值找到原堆内存就会有影响</p><p>根据拷贝的地址值没有找到对应的原堆内存就不会有影响</p><p><strong>递归</strong></p><p>执行方法过程中 再次调用本方法</p><p>递归次数过多 有可能会造成栈溢出错误</p><h4 id="面向对象简介"><a href="#面向对象简介" class="headerlink" title="面向对象简介"></a>面向对象简介</h4><p>面向过程：关注的是代码的实现细节</p><p>面向对象：先把代码实现细节整合到对象中，只要找到对象就能拥有对象的功能</p><p>面向对象基于面向过程</p><p>类与对象的关系</p><p>类是对象的概括 对象是对类的具体实现</p><p>类是描述信息的 描述的信息就是对象即将拥有的特征和行为</p><p>构造方法 </p><p>构建对象</p><p>属性初始化</p><p>支持重载 </p><p>类中至少含有一个构造方法</p><p><strong>this</strong></p><p>目的：属性初始化 参与类的信息和描述 可以让类中的属性和成员方法参与进来</p><p>功能：代表当前类的对象</p><p>this语句：—在本体的构造方法调用其他构造方法</p><p>构造代码块</p><p>无论调用哪个构造方法都要先执行构造代码块的内容</p><p>局部代码块</p><p>控制变量的生命周期</p><p>局部变量和成员变量</p><p>成员变量和成员方法 不包括构造方法 都是参与描述类的信息</p><p>定义位置</p><p>适用范围</p><p>内存分区</p><p>生命周期 0</p><p><strong>三大特征</strong></p><p>封装继承多态</p><p>封装：是为了以后更好的维护代码</p><p>方法：属性私有化提供公共的访问方式来做取值和赋值</p><p>继承</p><p>多个类出现重复内容 把重复内容拿到新的类中，让原来的类和新的类通过extends关键字产生继承关系，原来的类称之为子类，新的类称之为父类，子类只能继承父类的部分信息（私有化信息以及构造方法和构造代码块都不能继承）</p><p>java中类与类之间支持单继承（类只能有一个父类  一个父类可以有多个子类）</p><p>重写 </p><p>父子类出现方法签名一致的方法 </p><p>遵守重写原则（两等 两小 一大）</p><p>方法签名（是重写的前提）</p><p>如果父类 的方法返回值类型是基本数据类型或者是void那么子类的返回值方法要和父类的一致</p><p>子类的访问权限修饰符 要么和父类一致 要么比父类的范围要大</p><p>访问权限修饰符 （由定义信息的位置和操作信息的位置   控制可以在那些位置关系下操作定义的信息 ）</p><p>super </p><p>代表父类的对象 可以去调用父类 的信息</p><p>super 语句—在子类的构造方法中去调用父类的构造方法 保证每个子类的构造方法都可以调用到父类构造方法 父类对象优先于子类对象先出现  父子类对象信息的执行顺序（父类构造代码块-父类构造方法-子类构造代码块-子类构造方法）</p><p>多态</p><p>程序运行过程中可以展现的多种形态</p><p>编译时多态  编译时期绑定代码</p><p>方法重载       </p><p>运行时多态  运行时期绑定代码  重写   </p><p>静态变量</p><p>类存放在方法区的静态常量池里，静态变量存储在方法区静态常量池的静态区  可以通过类名.形式来调用也可以通过对象调用</p><p>静态变量被所有的对象共享</p><p>静态方法</p><p>类存放在方发区的静态常量池里，静态方法存储在方法区静态常量池的静态区   静态方法被调用加载到栈中执行  可以重载不能重写   静态信息不能直接访问非静态信息，静态信息可以直接访问静态信息，非静态信息可以直接访问静态信息以及非静态信息</p><p>静态代码块</p><p>预先加载资源以及静态属性初始化</p><p>随着类的加载而加载只加载一次</p><p>所有静态信息都只加载一次</p><p>父子类执行顺序（父类静态信息-子类静态信息–父类构造代码块 成员变量 –父类构造方法–子类（构造代码块，成员变量）-子类构造方法—先是类级别再试对象级别，无论是哪个级别顺序都是先父后子</p><p><strong>final</strong></p><p>修饰符，数据（如果是基本数据类型值不变，如果是引用类型是地址值不改变；如果是成员变量要求在创建对象之前给值，如果是静态常量要求在类加载完成之前给值—自定义变量</p><p>方法（可以重载不能重写），类（不能被继承）、</p><p><strong>abstract</strong></p><p>如果每个子类都对父类中某个方法进行不同程度的重写，某个方法的方法体没有实际意义可以把方法体去掉加上abstract变成 抽象方法，抽象方法所在的类是抽象类。 抽象方法要被重写 抽象类没有对象 抽象类的目的延展类的继承结构</p><p>接口</p><p>抽象类中的方法都是抽象方法可以变成接口</p><p> 接口不是类 类和接口的关系只能是实现（支持多实现），接口与接口支持多继承—目的是为了给实现类丰富更多的功能 </p><p>接口没有对象</p><p> 接口可以定义属性和抽象方法，属性默认被public static final共同修饰，抽象方法被public abstract来修饰 接口声明的对象可以在编译时期接收任意类型对象的赋值</p><p> 接口目的是为了注入更多的特性（功能）</p><p> 接口和抽象类的比较</p><p>优点：约束 模板</p><p><strong>内部类</strong></p><p>方法内部类</p><p>方法内定义类</p><p>不能访问权限修饰符修饰</p><p>可以获取本方法中常量信息</p><p>创建对象只能在本方法中</p><p><strong>成员内部类</strong></p><p>创建对象（由外部类对象调用内部类对象—要创建两个对象）</p><p><strong>静态内部类</strong></p><p>可以定义所有的信息</p><p>只能获取外部类的静态信息</p><p>创建对象</p><p><strong>匿名内部类</strong></p><p>可以默认继承类/实现接口，重写抽象方法 常用于方法形参类型是抽象类或者是接口的参数传递</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;复习&quot;&gt;&lt;a href=&quot;#复习&quot; class=&quot;headerlink&quot; title=&quot;复习&quot;&gt;&lt;/a&gt;复习&lt;/h1&gt;&lt;p&gt; &lt;strong&gt;基本语法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;跨平台—事先在操作系用上存放对应的jvm 讲java程序放到jvm中来运行，使得</summary>
      
    
    
    
    
    <category term="综合复习以上所学" scheme="http://senye.ink/tags/%E7%BB%BC%E5%90%88%E5%A4%8D%E4%B9%A0%E4%BB%A5%E4%B8%8A%E6%89%80%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>day13</title>
    <link href="http://senye.ink/2021/07/07/day13/"/>
    <id>http://senye.ink/2021/07/07/day13/</id>
    <published>2021-07-07T13:24:01.170Z</published>
    <updated>2021-07-07T13:24:44.778Z</updated>
    
    <content type="html"><![CDATA[<h4 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h4><p>类里定义类 ：匿名内部类</p><h4 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h4><p>栈：使用完内容 立即清除（不会产生垃圾）</p><p>方法区：存储类的信息（有垃圾但是很少）</p><p>堆：使用完对象 等到某个时刻才进行回收 （垃圾回收的主要针对内存区域）</p><p>堆分为新生代和老生代，新生代分为伊甸园区和幸存区。每次创建的新对象先存储在伊甸园区，系统针对这个区域进行一次扫描，如果发现新对象没有在使用就通知系统进行垃圾回收，如果新对象还在使用就新对象挪动到幸存区，系统针对幸存区这个区域进行多次扫描，如果发现对象没有在使用就通知系统进行垃圾回收，如果发生对象仍然还在使用就把对象挪动到老生代。系统针对老生代这个区域进行扫描，如果发现对象没有在使用通知系统进行垃圾回收，如果发现对象还在使用就是存储在老生代。</p><h4 id="·包"><a href="#·包" class="headerlink" title="·包"></a>·包</h4><p>区分同名类</p><p>用法：1.声明包 package 表明类的的位置，要在代码的首行，只能出现一个 ;2. import 导包 使用的类和当前类不在一个包下（不在代码首行 可以出现多个）3.* 代表通配符可以匹配到当前级别所有的类或者接口</p><p>提供的包</p><p>java : java原生包 </p><p>lang包：提供的是核心类库，随着程序的启动而加载，使用时不需要导包 ；</p><p>util 包 ：操作；类和对象的工具；</p><p>applet awt 包；</p><p>beans包：框架 ；</p><p>io包：数据传输；</p><p>math包：提供了简单的数学运算；</p><p>net包：网络传输 </p><p>nio包：高并发   2008  8  8  奥运会 网站崩了</p><p>security包：安全</p><p>sql包：操作sql语句的</p><p>time包：代表时间和日期</p><p>javax：java的扩展包</p><p>org  ：第三方厂商提供的包  Apache（民间组织） (hadoop) </p><h4 id><a href="#" class="headerlink" title></a></h4><p>API(appication Programing Interfaces)—应用程序接口（提供了一系列的类或者接口）api中所有的方法要么被</p><p>Object类是java中所有类的父类，java中所有的类默认继承object类。 </p><p>重要方法</p><p>1.clone() 把原对象中属性值拷贝到新对象中并且返回新对象类需要实现cloneable接口产生的对象才支持克隆</p><ol start="2"><li>finalize（）通知系统进行垃圾回收</li><li>getClass() 返回object的实际创建类型（本质是返回的是对象的类型—包名+类名）</li><li>hashcode（）返回对象的哈希码值，不同对象的哈希码值不一样 哈希码特点（取值范围广。散列分布—唯一的代表内存地址值）</li><li>toString() object类里的toStringa方法拼接对象地址值来返回 希望操作对象看到的是对象属性值而不是地址值需要重写object类里的toString方法以后定义类需要重写toString方法</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;内部类&quot;&gt;&lt;a href=&quot;#内部类&quot; class=&quot;headerlink&quot; title=&quot;内部类&quot;&gt;&lt;/a&gt;内部类&lt;/h4&gt;&lt;p&gt;类里定义类 ：匿名内部类&lt;/p&gt;
&lt;h4 id=&quot;垃圾回收机制&quot;&gt;&lt;a href=&quot;#垃圾回收机制&quot; class=&quot;headerli</summary>
      
    
    
    
    
    <category term="内部类 垃圾返回机制 包" scheme="http://senye.ink/tags/%E5%86%85%E9%83%A8%E7%B1%BB-%E5%9E%83%E5%9C%BE%E8%BF%94%E5%9B%9E%E6%9C%BA%E5%88%B6-%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>day12</title>
    <link href="http://senye.ink/2021/07/06/day12/"/>
    <id>http://senye.ink/2021/07/06/day12/</id>
    <published>2021-07-06T14:02:44.132Z</published>
    <updated>2021-07-06T14:10:03.258Z</updated>
    
    <content type="html"><![CDATA[<p><strong>final(最终)</strong></p><p>关键字，修饰符     数据方法和类</p><p>最终值：final修饰的数据</p><p>1.如果是基本数据类型那么值不能改变，如果是引用数据类型那么地址值不能改变</p><p>2.如果final修饰的是成员变量要求在创建对象完成之前进行初始化，如果修饰的静态变量要求在类加载完成之前进行初始化</p><p>最终方法：可以重载但是不能重写</p><p>最终类：不能被别的类继承但是可以继承别的类</p><p><strong>abstract抽象</strong>、</p><p>关键字，修饰符 方法，类</p><p>多个子类都对父类中的某个方法进行了不同程度的重写，父类的某个方法的方法体内书写任何内容都没有意义所以可以把某个方法中方法体去掉并且加上abstract关键字来修饰就变成了抽象方法。抽象方法一定要被重写，普通类中出现了抽象方法那么要把普通类变成抽象类。普通继承了抽象类需要去重写抽象类中所有的抽象方法，如果不想重写所有的抽象方法可以把普通类变成抽象类</p><p>注意：1.抽下类中一定含有抽象方法？ 不一定</p><p>2.抽象类中可以定义属性和方法？可以</p><p>3.抽象类中可以定义构造方法？ 可以</p><p>4.抽象类可以创建对象？不能 底层创建对象是有其他编程语言来完成的 java获取不到，认为抽象类没有对象</p><p>5.抽象方法可以被private/static/final分别修饰？不能 如果加上修饰就不能被重写</p><p>6.抽象方法可以重载？可以 方法的重载只和方法名和参数列表有挂你先，与其他的修饰符和返回值都没有关系</p><p>7.抽象类可以被final修饰？final修饰的类是最终类，不能被继承 如果抽象类没有继承就不能重写抽象方法</p><p>8.抽象类的宗旨是为了延展类的继承结构，完善类与类的继承关系</p><p><strong>接口</strong> interface 本质不是类</p><p>1.当抽象类中所有的方法都是抽象方法可以把抽象类通过interface关键字变成接口</p><p><code>implements</code> —–实现 让类和接口之间产生实现关系</p><p>2.普通类实现一个接口，需要重写接口中所有的抽象方法</p><p>3.如果不想重写所有的抽象方法可以把当前类变成抽象类即可</p><p>4.支持多实现（一个类可以实现多个接口）</p><p>5.接口与接口之间多继承 类与接口之间多实现是为了丰富实现类的功能（更多的重写抽象方法）</p><p>注意：a.接口可以定义构造方法？不可以</p><p>b.接口可以创建对象吗？没有</p><p>c.接口里面的方法都是抽象方法？是的</p><p>d声明的接口在编译时期可以接受任意类型对象的赋值，但是在运行时期会检测是否实现关系</p><p>e.类里面可以定义属性方法？属性默认被public static final 共同修饰，抽象方法默认被public abstract共同修饰</p><p>f.接口和抽象类的区别：1.抽象类支持单继承，接口支持多继承，接口和实现类支持多实现 2.抽象类可以定义构造方法，接口不能定义构造方法 3.接口中的属性默认被public static final共同修饰 抽象方法默认被public abstract共同修饰4.抽象类中可以不是抽象方法，接口中都是抽象方法 5.抽象类是为了延展类的继承结构，接口是为了注入更多的特性</p><p>优点：模板 约束</p><p><strong>内部类</strong></p><p>类里再定义类：</p><p>方法内部类：在方法内定义类；只能定义非静态信息以及静态常量；可以正常继承和实现；不能被访问权限修饰符修饰可以被final、abstract来修饰；可以获取外部类所有方法；只能获取当前方法中的常量信息</p><p>成员内部类</p><p>在成员的位置定义；只能定义非静态信息以及静态常量；可以正常进行继承和实现；可以被访问权限修饰符修饰以及final/abstract来修饰；可以获取外部类所有信息</p><p>静态内部类</p><p>匿名内部类</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;final(最终)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;关键字，修饰符     数据方法和类&lt;/p&gt;
&lt;p&gt;最终值：final修饰的数据&lt;/p&gt;
&lt;p&gt;1.如果是基本数据类型那么值不能改变，如果是引用数据类型那么地址值不能改变&lt;/p&gt;
&lt;p&gt;2.如果final修</summary>
      
    
    
    
    
    <category term="final 抽象 接口" scheme="http://senye.ink/tags/final-%E6%8A%BD%E8%B1%A1-%E6%8E%A5%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>day11</title>
    <link href="http://senye.ink/2021/07/05/day11/"/>
    <id>http://senye.ink/2021/07/05/day11/</id>
    <published>2021-07-05T13:57:23.289Z</published>
    <updated>2021-07-05T13:58:36.880Z</updated>
    
    <content type="html"><![CDATA[<p><strong>面向对象的特征、特性</strong></p><p>封装</p><p>继承–重写（两等两小一大）super</p><p> 多态–编译时多态  运行时多态  向上造型–统一参数</p><p>静态变量</p><p>  static修饰的属性随着类的加载（静态常量池） 而加载到方法区的静态区里。静态变量称之为类变量，可以被类名的形式直接调用也可以被对象调用。存储在静态去的静态变量会被赋予系统默认初始值。无论创建多少和对象都共享同一个静态变量。使用静态变量的场景–希望属性被所有的对象共享。</p><p><strong>注意</strong>static不可以修饰局部变量</p><p>静态方法</p><p>随着类的加载而加载到方法区的静态区 称之为类方法可以被类名.的形式来调用也可以通过对象来调用。存储在静态区的静态方法不会被赋予系统默认初始值。如果静态方法被调用会被加载到栈中执行。</p><p><strong>注意</strong> </p><p>静态方法定义静态变量？不可以 方法只有被调用时才会执行 执行方法内容时才会加载方法中的内容 但是静态变量与类同级 前后不一致 所以所有的方法中都不能定义静态变量</p><p>静态信息可以直接访问静态信息不能直接访问非静态信息，非静态信息可以直接访问静态信息和非静态信息</p><p>Arrays.sort() System.arraycopy(); Arrays.copyOf;</p><p>静态方法可以重载？ 可以</p><p>可以重写？ 不可以 静态方法与类同级重写和对象一个级别所以静态方法没有重写形式 允许父子类中出现方法签名一致的两个静态方法 或者两个非静态方法</p><p><strong>静态代码块</strong></p><p>使用static修饰构造代码块</p><p>可以对静态属性进行初始化和预加载一些资源</p><p>静态代码随着类的加载只加载一次</p><p>static修饰的所有信息都只加载一次</p><p><strong>父子类的执行顺序</strong>—类级别 （父类静态信息-子类静态信息）—对象级别（父类（成员变量、构造代码块） –父类构造方法–子类（成员变量、构造代码块）–子类构造方法</p><hr><p>Stack Overflow 外网</p><p>经典应用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Shape s1 = <span class="keyword">new</span> Rectangle(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">        System.out.println(s1.getGirth());</span><br><span class="line">        Shape s2 = <span class="keyword">new</span> Circle(<span class="number">3</span>);</span><br><span class="line">        System.out.println(s2.getArea());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过构造方法来进行属性的初始化 赋值</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> y;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Shape</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getX</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getY</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getGirth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.0</span>;<span class="comment">//图形类代表是任意的图形不能用矩形的计算公式来计算</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 子类有参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(x, y);<span class="comment">//调用父类的有参构造</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getGirth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * (getX() + getY());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">grtArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getY() * getX();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Square</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(x, x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(<span class="keyword">double</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(r, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getGirth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * <span class="number">3.14</span> * getX();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3.14</span> * getX() * getX();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;面向对象的特征、特性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;封装&lt;/p&gt;
&lt;p&gt;继承–重写（两等两小一大）super&lt;/p&gt;
&lt;p&gt; 多态–编译时多态  运行时多态  向上造型–统一参数&lt;/p&gt;
&lt;p&gt;静态变量&lt;/p&gt;
&lt;p&gt;  static修饰的属性随着类的加载</summary>
      
    
    
    
    
    <category term="封装 静态代码块" scheme="http://senye.ink/tags/%E5%B0%81%E8%A3%85-%E9%9D%99%E6%80%81%E4%BB%A3%E7%A0%81%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>day10</title>
    <link href="http://senye.ink/2021/07/02/day10/"/>
    <id>http://senye.ink/2021/07/02/day10/</id>
    <published>2021-07-02T13:40:34.473Z</published>
    <updated>2021-07-02T13:43:57.919Z</updated>
    
    <content type="html"><![CDATA[<h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>  多个类中出现了重复的内容，把这些重复的内容放到新的类中，通过extend关键字让原来的类和新的类产生了继承关系，原来的类称之为子类、新的类称之为父类。子类可以继承父类部分信息。</p><p>继承方式（树状图）</p><p>   单继承：一个类只能有一个父类，一个类可以有多个子类（支持多级继承）</p><h4 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h4><p>  在父子类中出现了方法签名一致的方法称之为叫重写，遵守重写原则（两等两小一大）</p><p>  方法签名一致（如果方法签名一致java才会按照重写去检测是否遵守原则如果方法签名不一致则不检测重写原则—方法签名一致是重写的前提）</p><p>  如果父类的方法返回值类型是基本数据类型、void，那么子类的方法返回值类型和父类保持一致</p><p>  如果父类的方法返回值类型是引用数据类型，那么子类的方法返回值类型要么和父类一致，要么是父类方法返回值类型的子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> A <span class="title">m</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="keyword">null</span>;<span class="comment">//A a=null;</span></span><br><span class="line">            &#125;</span><br><span class="line">    <span class="comment">//public int m()&#123;return 1;&#125;//int a=1;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">extends</span> <span class="title">C</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> A/<span class="function">B <span class="title">m</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="keyword">null</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h4><p>（由定义信息的位置和操作信息的位置共同决定一个位置信息）子类  其他类 同包类 本类。（控制在哪些位置关系下操作定义的信息</p><table><thead><tr><th></th><th>本类</th><th>同包类</th><th align="right">子类</th><th>其他类</th></tr></thead><tbody><tr><td>public）（垃圾桶)</td><td>可以</td><td>可以</td><td align="right">可以</td><td></td></tr><tr><td>protected(水杯)</td><td>可以</td><td>可以</td><td align="right">可以</td><td>不可以</td></tr><tr><td>private</td><td>可以</td><td>不可以</td><td align="right">不可以</td><td>不可以</td></tr><tr><td>默认不写（窗户）</td><td>可以</td><td>可以</td><td align="right">同包子类</td><td>不可以</td></tr></tbody></table><p>子类的访问权限修饰符要么和父类一致要么大于父类权限的修饰符范围。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Class A&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="super"><a href="#super" class="headerlink" title="super"></a>super</h4><ol><li><p>关键字，代表父类的对象可以调用父类的属性和方法</p></li><li><p>super语句可以在子类构造方法中调用父类的构造方法，要在首航使用</p></li><li><p>子类的每个构造方法中默认含有一个无参的super语句去调用父类的无参构造，如果父类没有提供无参构造，子类的每一个构造方法里需要手动书写有参super语句调用父类对应点有参构造</p></li><li><p>父类的对象优先于子类的对象产生</p></li><li><p>子类的<strong>对象信息</strong>的执行顺序 父类的构造代码块-父类构造的方法-子类构造的代码块-子类构造的方法</p><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><p>在程序操作过程中可以凸显多种形式</p><p>从java的时期来解释多态，编译时期和运行时期</p><p>编译时多态：在编译时期绑定代码 体现形式—重载 </p></li></ol><p>   运行时多态：在运行时期绑定代码  体现形式—重写 向上造型—前提是继承）</p><p>   向上造型</p><p>   声明类是父类，实际创建类是子类，这样创建的对象就是向上造型 向上造型的对象可以调用哪些方法看父类，方法的具体执行看子类是否有重写（父类—目录 子类—正文）</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.tedu.duotai;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DTDemo</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> <span class="comment">/*//养宠物</span></span><br><span class="line"><span class="comment"> Pet p;</span></span><br><span class="line"><span class="comment"> //养条狗</span></span><br><span class="line"><span class="comment"> p=new Dog();*/</span></span><br><span class="line"> <span class="comment">//左边声明类是父类，右边实际创建对象的类是子类---向上造型</span></span><br><span class="line"> Pet p=<span class="keyword">new</span> Dog();</span><br><span class="line"> <span class="comment">//向上造型的对象可以调用哪些方法看父类</span></span><br><span class="line"> <span class="comment">//向上造型调用的方法的具体执行看子类是否有重写方法</span></span><br><span class="line"> p.eat();</span><br><span class="line"> <span class="comment">//调用方法</span></span><br><span class="line"> <span class="comment">//匿名对象适用于当作参数传递</span></span><br><span class="line"> m(<span class="keyword">new</span> Pet());</span><br><span class="line"> m(<span class="keyword">new</span> Dog());</span><br><span class="line"> m(<span class="keyword">new</span> Cat());</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">(Pet p)</span></span>&#123;<span class="comment">//=new Pet(); =new Dog(); =new Cat();</span></span><br><span class="line"> p.eat();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义代表宠物的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pet</span></span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;在吃东西。。。&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>&#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;在睡觉。。。&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义代表狗的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Pet</span></span>&#123;</span><br><span class="line"> <span class="comment">//重写</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;在呼哧呼哧的吃。。。&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bark</span><span class="params">()</span></span>&#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;在汪汪汪的叫。。。&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义代表猫的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Pet</span></span>&#123;</span><br><span class="line"> <span class="comment">//重写</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;在哼哧哼哧的吃。。。&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> 磨爪子()&#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;在磨爪子。。。&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>多态的优点：</p><p>1.参数功能统一</p><ol start="2"><li>高内聚低耦合 （解耦—降低耦合度）</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h4&gt;&lt;p&gt;  多个类中出现了重复的内容，把这些重复的内容放到新的类中，通过extend关键字让原来的类和新的类产生了继承关系，原来的类称之为子类、新的</summary>
      
    
    
    
    
    <category term="继承 重写 super 多态" scheme="http://senye.ink/tags/%E7%BB%A7%E6%89%BF-%E9%87%8D%E5%86%99-super-%E5%A4%9A%E6%80%81/"/>
    
  </entry>
  
  <entry>
    <title>day09</title>
    <link href="http://senye.ink/2021/07/01/day09/"/>
    <id>http://senye.ink/2021/07/01/day09/</id>
    <published>2021-07-01T13:51:42.481Z</published>
    <updated>2021-07-01T13:52:50.840Z</updated>
    
    <content type="html"><![CDATA[<p>哥德巴赫猜想：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GeDe</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//给定一个num</span></span><br><span class="line">        <span class="keyword">int</span> num=<span class="number">10000</span>;</span><br><span class="line">        <span class="keyword">if</span>((num&gt;<span class="number">6</span>)&amp;&amp;(num%<span class="number">2</span>==<span class="number">0</span>))&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;(num/<span class="number">2</span>);i++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (isPrime(i)&amp;&amp;(isPrime(num-i)))&#123;</span><br><span class="line">                    System.out.println(num+<span class="string">&quot;=&quot;</span>+i+<span class="string">&quot;+&quot;</span>+(num-i));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请重新输入&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义方法---判断一个整数是否为质数</span></span><br><span class="line">    <span class="comment">//两个明确---方法返回值类型 boolean  参数列表 int m</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">        <span class="comment">//非正常情况---小于等于0</span></span><br><span class="line">        <span class="keyword">if</span>(m&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//通过for循环实现</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=(m/<span class="number">2</span>);i++)&#123;</span><br><span class="line">            <span class="comment">//判断是否被整除</span></span><br><span class="line">            <span class="keyword">if</span> (m%i==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//是质数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>源码：public static native void arraycopy(Object </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">src：要复制的数组(源数组)</span><br><span class="line"></span><br><span class="line">srcPos：复制源数组的起始位置</span><br><span class="line"></span><br><span class="line">dest：目标数组</span><br><span class="line"></span><br><span class="line">destPos：目标数组的下标位置</span><br><span class="line"></span><br><span class="line">length：要复制的长度</span><br></pre></td></tr></table></figure><p>——————————————</p><p><strong>构造方法</strong></p><p> 构建对象</p><p>形式：1.没有方法返回值的类型；2.方法名于类同名 </p><p>如果类中没有定义构造方法会默认提供无参构造，如果类中定义构造方法就不会默认提供无参构造</p><p>一个类中至少含有一个构造方法</p><p> java中所有的非静态方法和属性只能通过对象调用</p><h4 id="This"><a href="#This" class="headerlink" title="This"></a>This</h4><h4 id="关键字，代表当前类的对象"><a href="#关键字，代表当前类的对象" class="headerlink" title="关键字，代表当前类的对象"></a>关键字，代表当前类的对象</h4><p>1.this可以代表还没有创建的对象可以代表刚创建的对象、可以代表一个正在使用的对象，this是一个虚拟的2.对象通过指定对象地址值来代表对象，代表的就是当前类正在活动的对象</p><p>3.this 语句，在构造方法中去调用别的构造方法，使用构造方法的首行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">public class ThisDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F;创建Student对象</span><br><span class="line">        Student s1&#x3D;new Student();</span><br><span class="line">        &#x2F;&#x2F;this 代表刚创建的对象</span><br><span class="line">        System.out.println(&quot;s1:&quot;+s1);</span><br><span class="line">        &#x2F;&#x2F;创建一个Student的对象</span><br><span class="line">        Student s2&#x3D;new Student(&quot;tom&quot;);</span><br><span class="line">        &#x2F;&#x2F;this正在使用的对象</span><br><span class="line">        System.out.println(&quot;s2&quot;+s2);</span><br><span class="line">        &#x2F;&#x2F;this代表这个在活动的对象</span><br><span class="line">        s1.study();                    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;代表学生类</span><br><span class="line">class Student&#123;</span><br><span class="line">    &#x2F;&#x2F;属性</span><br><span class="line">    String name;</span><br><span class="line">    int age;</span><br><span class="line">    char gender;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;无参构造</span><br><span class="line">    public  Student()&#123;</span><br><span class="line">        System.out.println(&quot;this:&quot;+this);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;有参构造</span><br><span class="line">    public Student(String name)&#123;</span><br><span class="line">        this.name&#x3D;name;</span><br><span class="line">        System.out.println(&quot;name:&quot;+this);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;行为</span><br><span class="line">    public void study()&#123;</span><br><span class="line">        System.out.println(this.name+&quot;在学习&quot;);</span><br><span class="line">        System.out.println(&quot;this:&quot;+this);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>this:cn.tedu.text.Student@28d93b30<br>s1:cn.tedu.text.Student@28d93b30<br>name:cn.tedu.text.Student@1b6d3586<br>s2cn.tedu.text.Student@1b6d3586<br>null在学习<br>this:cn.tedu.text.Student@28d93b30</p><p>Process finished with exit code 0</p><h4 id="构造代码块"><a href="#构造代码块" class="headerlink" title="构造代码块"></a>构造代码块</h4><p>在类内方法外位置{}</p><p>构造代码块可以给属性进行初始化 优于构造方法优先执行</p><h4 id="局部代码块"><a href="#局部代码块" class="headerlink" title="局部代码块"></a>局部代码块</h4><p>在方法内（）</p><p>控制变量的生命周期，提高内存的利用率</p><h4 id="成员变量与局部变量的区别、"><a href="#成员变量与局部变量的区别、" class="headerlink" title="成员变量与局部变量的区别、"></a>成员变量与局部变量的区别、</h4><p><strong>定义位置：</strong>     成员变量：类内方法外          局部变量：方法内</p><p><strong>使用范围</strong>：    成员变量：整个类                  局部变量：整个方法</p><p><strong>生命周期：</strong>      成员变量：类创建对象的时候 随着对象的创建而产生 ，随着对象被回收而销毁      局部变量：随着当发被调用执行才产生，随着方法调用执行结束而销毁</p><h3 id="面向对象的特性"><a href="#面向对象的特性" class="headerlink" title="面向对象的特性"></a>面向对象的特性</h3><p>1、封装 继承 多态（抽象）、</p><p><strong>封装</strong></p><p>体现形式–方法，属性私有化通过提供的公共的访问方式来操作私有化属性的值 提高了数据的安全性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">public class FDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F;创建Person类对象</span><br><span class="line">        Person p&#x3D;new Person();</span><br><span class="line">        &#x2F;&#x2F;操作对象属性</span><br><span class="line">        p.name&#x3D;&quot;lili&quot;;</span><br><span class="line">        &#x2F;&#x2F;p.age&#x3D;-10;</span><br><span class="line">        &#x2F;&#x2F;调用方法间接赋值</span><br><span class="line">        p.setAge(10);</span><br><span class="line">        p.gender&#x3D;&#39;女&#39;;</span><br><span class="line">        &#x2F;&#x2F;调用方法间接的获取类的私有化属性值</span><br><span class="line">        System.out.println(p.getAge()+&quot;,&quot;+p.gender+&quot;,&quot;+p.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;定义代表人的类</span><br><span class="line">class Person&#123;</span><br><span class="line">    &#x2F;&#x2F;属性</span><br><span class="line">    &#x2F;&#x2F;类中的所有属性都有安全性的问题，为了解决数据安全性的问题属性私有化</span><br><span class="line">    private String name;</span><br><span class="line">    &#x2F;&#x2F;private 私有化在属性和方法不能直接使用</span><br><span class="line">    private int age;</span><br><span class="line">    private char gender;</span><br><span class="line">    &#x2F;&#x2F;alt+insert  ---get 和  set</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setGender(char gender) &#123;</span><br><span class="line">        this.gender &#x3D; gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public char getGender() &#123;</span><br><span class="line">        return gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;定义一个方法给私有化的属性进行赋值</span><br><span class="line">    public void setAge(int age)&#123;</span><br><span class="line">        if (age&lt;0) &#123;</span><br><span class="line">            System.out.println(&quot;信息有误&quot;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            this.age&#x3D;age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;定义方法获取私有化属性</span><br><span class="line">    public int getAge()&#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;有参构造</span><br><span class="line">   &#x2F;* public Person(int age)&#123;</span><br><span class="line">        if (age&lt;0) &#123;</span><br><span class="line">            System.out.println(&quot;信息有误&quot;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            this.age&#x3D;age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;*&#x2F;</span><br><span class="line">    public void eat()&#123;</span><br><span class="line">        System.out.println(name+&quot;在吃饭&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;哥德巴赫猜想：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;</summary>
      
    
    
    
    
    <category term="构造方法、成员变量、this" scheme="http://senye.ink/tags/%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%E3%80%81%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E3%80%81this/"/>
    
  </entry>
  
  <entry>
    <title>day08</title>
    <link href="http://senye.ink/2021/06/30/day08/"/>
    <id>http://senye.ink/2021/06/30/day08/</id>
    <published>2021-06-30T14:21:19.846Z</published>
    <updated>2021-06-30T14:24:07.910Z</updated>
    
    <content type="html"><![CDATA[<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h4><p>把重复且有效的代码抽取的形式、</p><h4 id="2-格式"><a href="#2-格式" class="headerlink" title="2.格式"></a>2.格式</h4><p>修饰符 方法返回值类型 方法名(参数类型1 参数名1，参数类型2 参数名2,…){</p><p>方法体;</p><p> return 返回值;</p><p>}</p><p>修饰符：public static </p><p>方法返回值类型:根据方法返回值的类型指定对应的数据类型来接受 </p><p>方法名:标识符 </p><p>参数列表:由参数类型、参数个数、参数顺序 </p><p>方法体:重复且有效代码</p><p> return:把返回值进行返回</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>1.方法被调用才能执行 </p><p>2.抽取方法时需要两个明确—方法返回值类型、参数列表 </p><p>3.return两个功能:把方法的返回值进行返回、 结束方法 </p><p>4.如果方法有参数，需要考虑参数值的取值范围，针对取值范围的内的数据进行操作</p><p>有参数有返回值 </p><p>有参数无返回值 </p><p>无参数有返回值 </p><p>无参数无返回值</p><h4 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h4><p>在一个类中，多个方法名一致但是参数列表不一致 </p><p>如果重载方法有精确匹配的方法做精确匹配</p><p> 如果没有精确匹配的方法做相对精确匹配 </p><p>如果出现多个相对精确匹配的方法不能匹配到对应的方法会报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.tedu.method;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo2</span> </span>&#123;</span><br><span class="line"> <span class="comment">//由方法名和参数列表共同决定的方法才是唯一确定的方法</span></span><br><span class="line"> <span class="comment">//方法是由方法签名来区分（方法签名由方法名和参数列表共同决</span></span><br><span class="line"> <span class="comment">//方法是由方法签名来区分（方法签名由方法名和参数列表共同决定）</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> <span class="comment">//重载方法的调用</span></span><br><span class="line"> <span class="comment">//如果重载方法有精确匹配的方法做精确匹配</span></span><br><span class="line"> <span class="comment">//如果没有精确匹配的方法做相对精确匹配</span></span><br><span class="line"> <span class="comment">//如果出现多个相对精确匹配的方法不能匹配到对应的方法会报错</span></span><br><span class="line"> <span class="comment">// System.out.println(sum(1,2));</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//求和</span></span><br><span class="line"> <span class="comment">//sum(int,int)</span></span><br><span class="line"> <span class="comment">//Ctrl+Shift+?---选中代码进行注释（再按一边取消注释）</span></span><br><span class="line"> <span class="comment">/*public static int sum(int x,int y)&#123;</span></span><br><span class="line"><span class="comment"> //快捷键---Ctrl+d(快速复制一行)</span></span><br><span class="line"><span class="comment"> //Alt+Shift+方向键（上下）---移动一行代码</span></span><br><span class="line"><span class="comment"> System.out.println(&quot;int int&quot;);</span></span><br><span class="line"><span class="comment"> return x+y;</span></span><br><span class="line"><span class="comment"> &#125;*/</span></span><br><span class="line"> <span class="comment">//sum(int,double)</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">double</span> y)</span></span>&#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;int double&quot;</span>);</span><br><span class="line"> <span class="keyword">return</span> x+y;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//sum(double,int)</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">sum</span><span class="params">(<span class="keyword">double</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;double double&quot;</span>);</span><br><span class="line"> <span class="keyword">return</span> x+y;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-传值"><a href="#5-传值" class="headerlink" title="5.传值"></a>5.传值</h4><p>如果实参的数据类型是基本数据类型那么传入的是值的拷贝 </p><p>如果拿着拷贝的地址值找到原堆内存就会影响原值</p><p> 如果拿着拷贝的地址值没有找到原堆内存就不会会影响原值 </p><p>如果实参的数据类型是引用数据类型那么传入的是地址值的拷贝</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.tedu.method;</span><br><span class="line"><span class="comment">//Ctrl+Alt+insert---快速建包建类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo3</span> </span>&#123;</span><br><span class="line"> <span class="comment">//java中所有的方法在栈中执行（不存储在栈中）</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line"> <span class="keyword">int</span>[] arr=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"> <span class="comment">//Alt+Enter---提示</span></span><br><span class="line"> <span class="comment">//实参---实际传入的参数值</span></span><br><span class="line"> <span class="comment">//如果实参的数据类型是基本数据类型，那么传递过去的就是拷贝值</span></span><br><span class="line"> <span class="comment">//m(i);</span></span><br><span class="line"> <span class="comment">//数组元素是基本数据类型，传递的仍然是值得拷贝</span></span><br><span class="line"> <span class="comment">//m(arr[0]);</span></span><br><span class="line"> <span class="comment">//如果实参数据类型是引用数据类型，那么传递的就是地址值的拷贝</span></span><br><span class="line"> <span class="comment">//n(arr);</span></span><br><span class="line"> <span class="comment">//如果实参数据类型是引用数据类型，那么传递的就是地址值的拷贝</span></span><br><span class="line"> mn(arr);</span><br><span class="line"> 分区 java语法基本组成 的第 <span class="number">2</span> 页 </span><br><span class="line"> mn(arr);</span><br><span class="line"> <span class="comment">//</span></span><br><span class="line"> System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//形参---来接收实参</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;<span class="comment">//接收到拷贝值做任何操作都不会影响原值</span></span><br><span class="line"> i++;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">n</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;<span class="comment">//通过接收的拷贝的地址值可以找到对应堆里的内容就可以改变内容从而影响原值</span></span><br><span class="line"> arr[<span class="number">0</span>]=<span class="number">10</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mn</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;<span class="comment">//通过接收的拷贝值如果没有找到对应的堆内存做任何操作都不会影响原值</span></span><br><span class="line"> arr=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line"> arr[<span class="number">0</span>]=<span class="number">10</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-递归"><a href="#6-递归" class="headerlink" title="6.递归"></a>6.递归</h4><p>执行方法过程中再次调用本方法</p><p>StackOverflowError—栈溢出错误 递归次数过多</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.tedu.method;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo4</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> System.out.println(sum(<span class="number">1000000</span>));</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//递归求和方法</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line"> <span class="comment">//递归结束条件</span></span><br><span class="line"> <span class="keyword">if</span>(m==<span class="number">1</span>)&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> m+sum(m-<span class="number">1</span>);<span class="comment">//10+sum(9)</span></span><br><span class="line"> <span class="comment">// 9+sum(8)</span></span><br><span class="line"> <span class="comment">// 8+sum(7)</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="面向对象简介"><a href="#面向对象简介" class="headerlink" title="面向对象简介"></a>面向对象简介</h2><p>1.概念 本质是一种编程范式（一种套路，一种思考方式）</p><p> 面向过程：关注的是每行代码实现细节 </p><p>面向对象：先把代码实现细节整合到对象身上，只要找到对象就能拥有对象身上的功能（万物皆对象） 面向对象基于面向过程，如果场景比较复杂推荐使用面向对象，如果场景比较简单优先推荐面向过程</p><p>2.类和对象的关系</p><p>对一类对象进行抽取，把共同的特征信息抽取成了属性，把共同的行为抽取成了方法，把这些对象抽取成了对应 的类。类是对对象的概括，对象是对类的具体实现。</p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.tedu.object;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectDemo</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> <span class="comment">//创建Person类的对象</span></span><br><span class="line"> Person p=<span class="keyword">new</span> Person();<span class="comment">//对象p</span></span><br><span class="line"> <span class="comment">//.代表“的”的意思</span></span><br><span class="line"><span class="comment">//操作的是对象p的属性</span></span><br><span class="line"> p.name=<span class="string">&quot;丽丽&quot;</span>;</span><br><span class="line"> p.age=<span class="number">12</span>;</span><br><span class="line"> p.gender=<span class="string">&#x27;女&#x27;</span>;</span><br><span class="line"> <span class="comment">//调用方法</span></span><br><span class="line"> p.eat();</span><br><span class="line"> <span class="comment">//对象地址值---cn.tedu.object.Person@28d93b30</span></span><br><span class="line"> System.out.println(p);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义Person类---代表人</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"> <span class="comment">//特征信息---属性（变量）</span></span><br><span class="line"> String name;</span><br><span class="line"> <span class="keyword">char</span> gender;</span><br><span class="line"> <span class="keyword">int</span> age;</span><br><span class="line"> <span class="comment">//行为---方法</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line"> System.out.println(name+<span class="string">&quot;在吃饭&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>&#123;</span><br><span class="line"> System.out.println(name+<span class="string">&quot;在睡觉&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;方法&quot;&gt;&lt;a href=&quot;#方法&quot; class=&quot;headerlink&quot; title=&quot;方法&quot;&gt;&lt;/a&gt;方法&lt;/h2&gt;&lt;h4 id=&quot;1-概念&quot;&gt;&lt;a href=&quot;#1-概念&quot; class=&quot;headerlink&quot; title=&quot;1.概念&quot;&gt;&lt;/a&gt;1.概念&lt;/h</summary>
      
    
    
    
    
    <category term="方法、重载、面向对象简介" scheme="http://senye.ink/tags/%E6%96%B9%E6%B3%95%E3%80%81%E9%87%8D%E8%BD%BD%E3%80%81%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AE%80%E4%BB%8B/"/>
    
  </entry>
  
  <entry>
    <title>day07</title>
    <link href="http://senye.ink/2021/06/29/day07/"/>
    <id>http://senye.ink/2021/06/29/day07/</id>
    <published>2021-06-29T15:50:06.279Z</published>
    <updated>2021-06-29T16:05:13.869Z</updated>
    
    <content type="html"><![CDATA[<p>数组 配置idea 方法</p><p>扩容—-扩大、扩小数组容器的容量（长度） —–数组定义完成之后长度无法改变</p><p>栈：存储变量（暂时），栈中存储的数据使用完毕时立刻销毁 堆：存储对象，存储的对象如果不再使用会在某个是时刻通过系统进行回收</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrKuoDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//给定原数组</span></span><br><span class="line"><span class="keyword">int</span>[] arr1=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="comment">//数组的扩容</span></span><br><span class="line"><span class="comment">//使用不方便复制内容比较灵活</span></span><br><span class="line"><span class="comment">//数组的复制</span></span><br><span class="line"><span class="comment">//新数组</span></span><br><span class="line"><span class="comment">//int[] arr2=new int[arr1.length*2];//确定新长度</span></span><br><span class="line"><span class="comment">//数组的复制(原数组，拷贝的起始下标，目标数组，粘贴的起始下标，复制的)</span></span><br><span class="line"><span class="comment">//System.arraycopy(arr1,arr2,0,arr1.length);</span></span><br><span class="line"><span class="comment">//数组地址值的赋值</span></span><br><span class="line"><span class="comment">//arr1=arr2;</span></span><br><span class="line">    arr1=Arrays.copyOf(arr1,arr1.length/<span class="number">2</span>);<span class="comment">//底层由上述三步实现；使用方便 复制元素内容不灵活</span></span><br><span class="line">System.out.println(Arrays.toString(arr1));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>arr1=Arrays.copyOf( )起始位置</p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//1.定义格式</span></span><br><span class="line"><span class="keyword">int</span> [][] arr=<span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">3</span>][<span class="number">2</span>];</span><br><span class="line"><span class="comment">//数组名--二维数组的地址值[[I@659e0bfd</span></span><br><span class="line">System.out.println(arr);</span><br><span class="line"><span class="comment">//第一个一维数组的地址值[I@2a139a55</span></span><br><span class="line">System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//第一个一维数组的第一个元素</span></span><br><span class="line">System.out.println(arr[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//第一个一维数组的第三个元素，没有第三个元素</span></span><br><span class="line"><span class="comment">//编译没错 .ArrayIndexOutOfBoundsException: --数组下标越界异常</span></span><br><span class="line">System.out.println(arr[<span class="number">0</span>][<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.数据类型【】【】数组名=new 数据类型【二维数组长度】【】；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] arr=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][];<span class="comment">//代表声明了3个一维数组</span></span><br><span class="line"><span class="comment">//给定初始值</span></span><br><span class="line">arr[<span class="number">0</span>]=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];<span class="comment">//可以</span></span><br><span class="line">arr[<span class="number">1</span>]=<span class="keyword">new</span> <span class="keyword">int</span>[][<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];<span class="comment">//可以</span></span><br><span class="line">arr[<span class="number">2</span>]=&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>&#125;;<span class="comment">//不可以</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] arr=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][];</span><br><span class="line"><span class="comment">//第一个一维数组的地址值--null （不指向任何的内存区）</span></span><br><span class="line">System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//第一个一维数组的第一个元素 NullPointerException</span></span><br><span class="line">        <span class="comment">//at Array2Demo.空指针异常 地址值为null 不指向任何内存区域获取不到值，如果强制获取值就会报错</span></span><br><span class="line">System.out.println(arr[<span class="number">0</span>][<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> [][] arr=&#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,</span><br><span class="line">              &#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;&#125;;<span class="comment">//指定值确定长度</span></span><br></pre></td></tr></table></figure><h2 id="配置IDEA"><a href="#配置IDEA" class="headerlink" title="配置IDEA"></a>配置IDEA</h2><p>打开bin-找到idea64 双击应用程序打开IDEA</p><p>​     IDEA   Project 工程  Module 模块灵活        src            包名   类名</p><p> 包名：com.baidu.dept(部门).group(组).id(工号)</p><p>​              IDEA边写边保存（自动编译）                                     </p><p>sout  :System.out.println()</p><p>m:main  方法</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>概念：把<strong>重复</strong>且<strong>有效</strong>的代码抽取的形式</p><p>书写格式：修饰符   方法返回值类型   方法名（参数类型1 参数值1 参数类型2 参数值2）{</p><p>方法体；</p><p>return 返回值；</p><p>}</p><p>修饰符： public static </p><p>方法返回值类型：根据方法的返回值数据类型提供对应的数据类型来接收方法返回值；方法可能没有返回值指定void来表示没有返回值</p><p>方法名：标识符</p><p>参数列表：由参数类型、参数个数、参数顺序共同决定</p><p>方法体：重复且有效的代码</p><p>return:把方法的返回值进行返回\</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java规定方法不能嵌套（一个方法中不能定义另一个方法）</span><br></pre></td></tr></table></figure><p>注意 ：1.方法一定要调用才执行！</p><p>简单的代码调用 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo1</span> </span>&#123;</span><br><span class="line">    <span class="comment">//java规定方法不能嵌套（一个方法中不能定义另一个方法）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//打印一个6行7列的星星</span></span><br><span class="line">       <span class="comment">/* for (int i=1;i&lt;=6;i++)&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            for (int j=1;j&lt;=7;j++)&#123;</span></span><br><span class="line"><span class="comment">                System.out.print(&quot;*&quot;);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            System.out.println();</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        //打印一个7行8列的星星</span></span><br><span class="line"><span class="comment">        for (int i=1;i&lt;=7;i++)&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            for (int j=1;j&lt;=8;j++)&#123;</span></span><br><span class="line"><span class="comment">                System.out.print(&quot;*&quot;);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            System.out.println();</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        //打印一个8行9列的星星</span></span><br><span class="line"><span class="comment">        for (int i=1;i&lt;=8;i++)&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            for (int j=1;j&lt;=9;j++)&#123;</span></span><br><span class="line"><span class="comment">                System.out.print(&quot;*&quot;);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            System.out.println();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            &#125;*/</span></span><br><span class="line">        <span class="comment">//调用方法--方法名（参数值）</span></span><br><span class="line">        printXing(<span class="number">6</span>,<span class="number">7</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义方法打印星星的方法</span></span><br><span class="line">    <span class="comment">//方法返回值类型--直接打印效果不需要返回值</span></span><br><span class="line">    <span class="comment">//参数列表--int m int n (控制行和列）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printXing</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>冒泡排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">MaoPao</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">int</span>[] arr=&#123;<span class="number">6</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">             <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=arr.length-<span class="number">1</span>;j++)&#123;</span><br><span class="line">                 <span class="keyword">if</span>(arr[j-<span class="number">1</span>]&gt;arr[j])&#123;</span><br><span class="line">                     <span class="keyword">int</span> temp=arr[j-<span class="number">1</span>];</span><br><span class="line">                     arr[j-<span class="number">1</span>]=arr[j];</span><br><span class="line">                     arr[j]=temp;</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         System.out.println(Arrays.toString(arr));</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>选择排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Choose</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">6</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>&#125;;</span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> j=i;j&lt;arr.length;j++)&#123;</span><br><span class="line">              <span class="keyword">if</span>(arr[i-<span class="number">1</span>]&gt;arr[j])&#123;</span><br><span class="line">                  <span class="keyword">int</span> temp=arr[i-<span class="number">1</span>];</span><br><span class="line">                  arr[i-<span class="number">1</span>]=arr[j];</span><br><span class="line">                  arr[j]=temp;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">     &#125;</span><br><span class="line">       <span class="comment">// Arrays.sort(arr); 这是java自带的排序方式</span></span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;数组 配置idea 方法&lt;/p&gt;
&lt;p&gt;扩容—-扩大、扩小数组容器的容量（长度） —–数组定义完成之后长度无法改变&lt;/p&gt;
&lt;p&gt;栈：存储变量（暂时），栈中存储的数据使用完毕时立刻销毁 堆：存储对象，存储的对象如果不再使用会在某个是时刻通过系统进行回收&lt;/p&gt;
&lt;figur</summary>
      
    
    
    
    
    <category term="数组 配置idea 方法" scheme="http://senye.ink/tags/%E6%95%B0%E7%BB%84-%E9%85%8D%E7%BD%AEidea-%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>day06</title>
    <link href="http://senye.ink/2021/06/28/day06/"/>
    <id>http://senye.ink/2021/06/28/day06/</id>
    <published>2021-06-28T14:20:27.044Z</published>
    <updated>2021-06-28T14:51:26.753Z</updated>
    
    <content type="html"><![CDATA[<h6 id="编译时期检测所有的代码"><a href="#编译时期检测所有的代码" class="headerlink" title="编译时期检测所有的代码"></a>编译时期检测所有的代码</h6><p>运行时期进行逻辑运算</p><p>百鸡问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ANS</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> z=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>( x=<span class="number">0</span>;x&lt;<span class="number">33</span>;x++)&#123;</span><br><span class="line">       <span class="keyword">for</span> ( y=<span class="number">0</span>;y&lt;<span class="number">50</span>;y++)&#123;</span><br><span class="line">       z=<span class="number">100</span>-x-y;</span><br><span class="line">       <span class="keyword">if</span>(z%<span class="number">3</span>==<span class="number">0</span>)&#123;</span><br><span class="line">       <span class="keyword">if</span> ((<span class="number">3</span>*x+<span class="number">2</span>*y+z/<span class="number">3</span>)==<span class="number">100</span>) &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;公鸡数&quot;</span>+x+<span class="string">&quot;,母鸡数&quot;</span>+y+<span class="string">&quot;，小鸡数&quot;</span>+z);</span><br><span class="line">       <span class="comment">// expression</span></span><br><span class="line">       &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       &#125;</span><br><span class="line">        &#125;</span><br><span class="line">   </span><br><span class="line">   &#125;&#125;</span><br></pre></td></tr></table></figure><p>//二分(折半)查找—二分算法在查找的应用<br>//定义三个下标用变量来表示<br>int min=0;<br>int max=arr.length-1;//长度值-1<br>int mid=(min+max)/2;<br>//循环–while<br>while(num!=arr[mid])//中间下标对应的元素值不相等才进循环操作<br>//如果查找数大于中间下标对应的元素值<br> if(max&gt;=min)<br>min=mid+1; }<br>//如果查找数小于中间下标对应的元素值</p><p> if(num&lt;arr[mid])(<br>//把最大下标往左挪动</p><p>max=mid-1;}</p><p> //查找数不存在情况<br> if(min&gt;max)l<br> System.outprintIn(“查无此数”);<br> break; }<br>int mid=(min+max)/2;<br>//重新计算中间下标<br> mid=(min+max)/2; }<br>//if(max&gt;=min)<br> System.out.printIn(mid); </p><p>第六天 加油</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h6 id=&quot;编译时期检测所有的代码&quot;&gt;&lt;a href=&quot;#编译时期检测所有的代码&quot; class=&quot;headerlink&quot; title=&quot;编译时期检测所有的代码&quot;&gt;&lt;/a&gt;编译时期检测所有的代码&lt;/h6&gt;&lt;p&gt;运行时期进行逻辑运算&lt;/p&gt;
&lt;p&gt;百鸡问题&lt;/p&gt;
&lt;figure</summary>
      
    
    
    
    
    <category term="关于实训" scheme="http://senye.ink/tags/%E5%85%B3%E4%BA%8E%E5%AE%9E%E8%AE%AD/"/>
    
  </entry>
  
  <entry>
    <title>day05</title>
    <link href="http://senye.ink/2021/06/25/day05/"/>
    <id>http://senye.ink/2021/06/25/day05/</id>
    <published>2021-06-25T13:54:45.452Z</published>
    <updated>2021-06-25T14:02:26.246Z</updated>
    
    <content type="html"><![CDATA[<h6 id="循环控制语句"><a href="#循环控制语句" class="headerlink" title="循环控制语句"></a>循环控制语句</h6><p> for循环</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* </span><br><span class="line">    for循环</span><br><span class="line">        格式</span><br><span class="line">            for(初始值；判断值；控制条件)&#123;</span><br><span class="line">            循环体；</span><br><span class="line">            &#125;</span><br><span class="line">        执行流程 </span><br><span class="line">            根据初始值和判断条件进行比较，如果比较大结果是true执行循环体，执行控制条件改变初始化值，拿着改变的值再和判断条件进行比较，如果比较的结果是true重复上述操作直到比较结果是false才结束循环</span><br><span class="line">            *&#x2F;</span><br></pre></td></tr></table></figure><p>求1-10的和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int sum&#x3D;0;</span><br><span class="line">       </span><br><span class="line">        for(int s&#x3D;1;s&lt;11;s++)&#123;</span><br><span class="line">         sum&#x3D;sum+s;&#x2F;&#x2F;sum+&#x3D;i;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum);</span><br></pre></td></tr></table></figure><p>求1-100偶数的和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int su&#x3D;0;</span><br><span class="line">        for(int a&#x3D;1;a&lt;100;a++)&#123;</span><br><span class="line">        if ((a&amp;1)&#x3D;&#x3D;0) &#123;</span><br><span class="line">        su+&#x3D;a;</span><br><span class="line">        &#x2F;&#x2F; expression</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(su);</span><br></pre></td></tr></table></figure><p>求5的阶乘</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int cj&#x3D;1;</span><br><span class="line">        for (int i&#x3D;5;i&gt;&#x3D;1;i--)&#123;</span><br><span class="line">        cj*&#x3D;i;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(cj);</span><br></pre></td></tr></table></figure><p>输出所有的水仙花数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for(int i&#x3D;100;i&lt;1000;i++)&#123;</span><br><span class="line">        &#x2F;&#x2F;&#x2F;获取三位数的每一位</span><br><span class="line">        int g&#x3D;i%10;</span><br><span class="line">        int s&#x3D;i&#x2F;10%10;</span><br><span class="line">        int b&#x3D;i&#x2F;100;</span><br><span class="line">        if (i&#x3D;&#x3D;(g*g*g+s*s*s+b*b*b)) &#123;</span><br><span class="line">        System.out.println(i);</span><br></pre></td></tr></table></figure><p>while循环</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">初始化值；</span><br><span class="line">           while(判断条件)&#123;</span><br><span class="line">           循环体；</span><br><span class="line">           控制条件；</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><p>dowhile循环</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">初始值；</span><br><span class="line">    do&#123;</span><br><span class="line">     循环体；</span><br><span class="line">     控制条件；</span><br><span class="line">    &#125; while（判断条件）；</span><br></pre></td></tr></table></figure><p><img src="/.ink//dev\blog\source\img\fc402ecde2d39d754eb4070ba1a34b1.png"></p><p>打印9*9乘法表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">for(int i&#x3D;1;i&lt;10;i++)&#123;</span><br><span class="line">    for(int a&#x3D;1;a&lt;&#x3D;i;a++)&#123;</span><br><span class="line">   </span><br><span class="line">    System.out.print(i+&quot;*&quot;+a+&quot;&#x3D;&quot;+i*a+&#39; &#39;);  &#x2F;&#x2F;注意“”和＋号连接一起！ </span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="控制跳转语句"><a href="#控制跳转语句" class="headerlink" title="控制跳转语句"></a>控制跳转语句</h6><p>break—跳出当前循环不执行</p><p>continue—跳出当次循环</p><p>return— （方法）</p><h6 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h6><p>​    概念：存储多个相同类型元素的容器</p><p>​    定义：数据类型【】 数组名=new 数据类型【数组长度、元素个数】；</p><p>​             int[] arr=new int[3];//定义出长度为3的整型数组arr  支持分为声名和初始化两个过程 给定元素值，长度就确定了。p><p>​                                                                                      </p><p>​           </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h6 id=&quot;循环控制语句&quot;&gt;&lt;a href=&quot;#循环控制语句&quot; class=&quot;headerlink&quot; title=&quot;循环控制语句&quot;&gt;&lt;/a&gt;循环控制语句&lt;/h6&gt;&lt;p&gt; for循环&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;</summary>
      
    
    
    
    
    <category term="关于实训" scheme="http://senye.ink/tags/%E5%85%B3%E4%BA%8E%E5%AE%9E%E8%AE%AD/"/>
    
  </entry>
  
  <entry>
    <title>day04</title>
    <link href="http://senye.ink/2021/06/24/day04/"/>
    <id>http://senye.ink/2021/06/24/day04/</id>
    <published>2021-06-24T14:02:24.129Z</published>
    <updated>2021-06-24T14:25:24.797Z</updated>
    
    <content type="html"><![CDATA[<p>键盘录入<br>//导包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line">class JavaDemo&#123;</span><br><span class="line">public static void main (String [] args) &#123;</span><br><span class="line">      Scanner sc&#x3D;new Scanner(System.in);</span><br><span class="line">    int num &#x3D;sc.nextInt();&#x2F;&#x2F;获取整数</span><br><span class="line">        String s&#x3D;sc.nextLine();&#x2F;&#x2F;获取一行转成字符串</span><br><span class="line">        System.out.println(num);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​                    </span><br><span class="line"></span><br><span class="line">​            &#125;</span><br><span class="line">​    &#125;</span><br></pre></td></tr></table></figure><hr><p>​        1.导包<br>​                   import java.util.Scanner;<br>​                2.获取Scanner<br>​                   Scanner sc=new Scanner(System.in);<br>​                3.获取数据<br>​                   sc.nextInt();获取数据<br>​                   sc.nextline（）；获取一行<br>​                流程控制语句<br>​                 顺序结构<br>​                    从上往下总左往右依次编译执行（绝大部分代码）<br>​                 选择结构<br>​                   if 语句<br>​                       if语句格式一<br>​                       if语句格式二<br>​                       if语句格式三<br>​                   switch 语句<br>​                   1.表达式支持byte short int char 从jdk1.5开始支持枚举，从jdk1.7开始支持String类型<br>​                   2.case的值都是常量 不能重复<br>​                   3.支持省略break 省略break会出现case穿透效果<br>​                   4.支持省略default<br>​                   5.switch语句结束的标志 {1.遇见break 2.执行到代码的最后一行}<br>​                 循环结构、<br>​                  流程执行  ：先去计算出表达式的值 拿着这个计算出的值和所有的case值进行比较如果有相等的就执行对应的case语句体，执行完语句体执行break<br>​                 switch 语句执行结束 如果计算出的值和所有的case的值都不相等执行default对应的语句体结着执行break，switch语句结束。   </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;键盘录入&lt;br&gt;//导包&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/</summary>
      
    
    
    
    
    <category term="关于实训" scheme="http://senye.ink/tags/%E5%85%B3%E4%BA%8E%E5%AE%9E%E8%AE%AD/"/>
    
  </entry>
  
  <entry>
    <title>day03</title>
    <link href="http://senye.ink/2021/06/23/day03/"/>
    <id>http://senye.ink/2021/06/23/day03/</id>
    <published>2021-06-23T13:54:47.231Z</published>
    <updated>2021-06-28T15:05:55.945Z</updated>
    
    <content type="html"><![CDATA[<p>随手记一下下 嘻嘻 今天是开始学习的第三天 逐渐适应了这里的生活方式 早起 挤公交 吃早饭 上课 吃午饭 上课 吃完饭 自习 从7点到9.40 可是安排的满满当当的了 刚想说这里原来有台电脑能自己看网课刷视频了呢 今天下午倒好 直接给整的限流了 我日 这又得拿着小手机去看视频了 哎 mad 这基地唬人呢 先完完全全拖协 想干嘛干嘛 这才两天呀 可是我这两天的眼皮它一直跳一直跳 我也不想让它跳 不过 我不迷信^_^ 今天吃饭莫名其妙就奔50了 我好像也没有吃啥呀 都没有喝汤汤 一直喝教室白开水了还  离谱奥 </p><p>Java是一门强类型语言，要求Java中所有的数据都要有数据类型的表示、<br>编译Java文件的命令：javac<br>java编译之后产生.class文件<br>java能够跨平台的基础JVM<br>1.在Java中初始化进行赋值时 如果给定的是整数那么这个整数的类型默认为int类型<br>2.在整数后面加上L/l 此时整数的类型指定为了long类型<br>3.在Java中初始化进行赋值时 如果给定的是小数那么这个小数的类型默认为double类型<br>4.在小数后面加上F/f 此时小数类型指定为float类型<br>5.变量的定义分为声明和初始化两个过程<br>6.变量在哪定义在哪使用<br>“A”—–65     “a”—–97<br>类型提升（包含被包含）<br>       从小到大 ：byte-short      char-int-long-float-double<br>                             BS    CILFD   记<br>        byte short char 无论做任何操作都会类型提升为int<br>   小数强制类型转换成整数时可能会出现舍弃<br>运算符<br>      算术运算符<br>          +   -   *  /  %    ++    –<br>      +： 求和 拼接 字符串连接符<br>      -： 求差<br>      ++：单独运算 在操作数前面先加1再赋值  在操作数的后面先赋值再加1<br>      byte b=127;//++含义强制类型转换！！！<br>        b++;//int 128    (byte)—–  -128<br>      赋值运算符<br>                   =（把右边的值赋值给左边）<br>                   +=  -=  *=  /=  %=  &amp;=(按位与等）|=（按位或等）<br>              java中不准出现连等定义 int a=b=c=4<br>                       允许出现连等赋值<br>       比较（关系）运算符   、<br>   比较运算符的结果一定是一个布尔值<br>       逻辑运算符<br>              &amp;：遇见false就是false<br>              | ：遇见true就是true<br>              ^:相同为false 不同为true<br>              ! :取反 （false变true true变false 几十个非结果取反 偶数个非结果不变） </p><pre><code>   位运算符   三目（元）运算符</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;随手记一下下 嘻嘻 今天是开始学习的第三天 逐渐适应了这里的生活方式 早起 挤公交 吃早饭 上课 吃午饭 上课 吃完饭 自习 从7点到9.40 可是安排的满满当当的了 刚想说这里原来有台电脑能自己看网课刷视频了呢 今天下午倒好 直接给整的限流了 我日 这又得拿着小手机去看视</summary>
      
    
    
    
    
    <category term="关于实训" scheme="http://senye.ink/tags/%E5%85%B3%E4%BA%8E%E5%AE%9E%E8%AE%AD/"/>
    
  </entry>
  
  <entry>
    <title>day02</title>
    <link href="http://senye.ink/2021/06/22/day02/"/>
    <id>http://senye.ink/2021/06/22/day02/</id>
    <published>2021-06-22T13:39:32.763Z</published>
    <updated>2021-06-22T13:40:26.712Z</updated>
    
    <content type="html"><![CDATA[<p>53个关键字 全部是小写<br>   const goto 原来不是叫保留字 现在是了在新的jdk版本中<br>标识符 —-在java中可以自定义的名称<br> 组成范围 </p><ol><li>各国常见文字<ol start="2"><li>数字 0-9 </li></ol></li><li>特殊的符号  _和 $（慎用—内部类会使用）<br>命名规则<br>1.不能出现关键字<br>2.不能以数字开头<br>在组成范围内的内容且遵守命名规则的是符合ja0 va语法的标识符（合法）<br>驼峰命令法（在标识符合法的基础上）<br>1.类名/接口名——XxxYyyZzz<br>2.方法名/变量名——-xxxYyyZzz<br>3.包名—— 包是用来区分同名类的 （单级文件夹—-xxx cn。   多级文件夹——xxx.yyy.zzz。  tedu.cn.day01<br>4.见名知意<br>注释 /*   */ 多行注释  单行注释 //<br>文档注释 /** */ 可以通过javadoc命令生成解释说明的文档<br>常量<br>程序运行过程中不发生改变的值<br>分类<br> 字面量常值      整数常量 1000 1839<pre><code>                小数常量 1.1 3.3                 字符串常量 “12” “guii”                字符常量“u”                布尔常量 true false                 空常量 null </code></pre>整数表示方式<br>二进制 由0和1表示 以0b开头的数据就是二进制数据 0b 1000<br>八进制  由0-7表示 以0开头的数据就是八进制数据<br>十进制<br>十六进制<br>其他进制转换成十进制<br>总结规律：项乘以基数为底的权次幂之和<br>十进制转换为其他进制<br>总结规律<br>除基取余 直到商为0 余数翻转<br>有符号的数<br>  计算机上所有的数据都在底层都是以二进制数据的补码形式来表示的<br>数据类型 ：限制数据变化范围<br>变量名：区分其他变量<br>初始化：给变量赋值</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;53个关键字 全部是小写&lt;br&gt;   const goto 原来不是叫保留字 现在是了在新的jdk版本中&lt;br&gt;标识符 —-在java中可以自定义的名称&lt;br&gt; 组成范围 &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;各国常见文字&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;数字 0-9 &lt;/li&gt;</summary>
      
    
    
    
    
    <category term="关于实训" scheme="http://senye.ink/tags/%E5%85%B3%E4%BA%8E%E5%AE%9E%E8%AE%AD/"/>
    
  </entry>
  
  <entry>
    <title>day01</title>
    <link href="http://senye.ink/2021/06/22/day01/"/>
    <id>http://senye.ink/2021/06/22/day01/</id>
    <published>2021-06-22T13:36:00.273Z</published>
    <updated>2021-06-22T13:39:16.236Z</updated>
    
    <content type="html"><![CDATA[<p>jre (java 运行时环境)—-提供java程序的运行环境<br> jre=jvm+运行类库<br>jdk (java 开发工具包） —- 提供java程序的运行环境和开发环境<br> jdk=jre+kit (开发工具包）<br>java 三大结构：j2se 提供桌面服务及小程序开发<br>                       j2ee 提供企业集中式开发<br>                       j2me 提供嵌入式开发<br>jdk的安装目录指定位置不能有中文和空格<br> 人机交互方式： 图形式交互 命令式交互<br>命令提示符的查找方式 ：win+R –cmd<br>                                     在地址栏中输入cmd （比较灵活）<br>命令提示符常用指令（DOS常用指令—低级编程语言）<br>                   ：cd    —–跳转到指定目录(文件夹）<br>                       cd..  —–返回上一层<br>                       cd/   —-当前盘符的根目录<br>环境变量 ：可以指定的操作的值<br>Path=jdk安装位置、bin;<br>D:\Program Files\Java\jdk1.8.0_45\bin<br>JAVA_HOME 自定义的环境变量jdk安装位置</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;jre (java 运行时环境)—-提供java程序的运行环境&lt;br&gt; jre=jvm+运行类库&lt;br&gt;jdk (java 开发工具包） —- 提供java程序的运行环境和开发环境&lt;br&gt; jdk=jre+kit (开发工具包）&lt;br&gt;java 三大结构：j2se 提供桌面</summary>
      
    
    
    
    
    <category term="关于实训" scheme="http://senye.ink/tags/%E5%85%B3%E4%BA%8E%E5%AE%9E%E8%AE%AD/"/>
    
  </entry>
  
  <entry>
    <title>大数据编程</title>
    <link href="http://senye.ink/2021/01/17/dashuju/"/>
    <id>http://senye.ink/2021/01/17/dashuju/</id>
    <published>2021-01-17T10:03:02.624Z</published>
    <updated>2021-01-17T10:16:37.967Z</updated>
    
    <content type="html"><![CDATA[<p>1.分布式文件系统是如何实现较高水平的扩展的？<br> 分布式文件系统把文件分布存储到多个计算机节点上，成千上万的计算机节点构成计算机集群。<br>2.试述HDFS中的名称节点和数据节点的具体功能。<br>名称节点：负责文件和目录的创建删除和重命名等，管理数据节点和文件块的映射关系。<br>数据节点：负责数据的存储和读取。<br>3.在分布式文件系统中，中心节点的设计至关重要，请阐述HDFS是如何减轻中心节点的负担的。<br>名称节点不参与数据的传输。<br>4.试述HDFS的冗余数据保存策略。<br>HDFS采用多副本方式对数据进行冗余存储，通常一个数据块的多个副本会被分不到不同的数据节点上。<br>5.请阐述HBase和传统关系数据库的区别。<br> 主要体现在6个方面。<br>主要方面    关系数据库    HBase<br>数据类型    关系模型 丰富的数据类型和存储方式    简单的数据模型 数据存储为未经解释的字符串<br>数据操作    丰富 插入 删除 更行 查询等 多表连接    不存在复杂的表与表之间的关系 仅插入 查询 删除 清空等<br>存储模式    基于行模式存储    基于列存储<br>数据索引    针对不同列构建复杂的多个索引，提高数据访问性能    索引是行键<br>数据维护    更行操作用最新的当前值替换记录中原来的旧值    更新操作不删除数据旧的版本<br>可伸缩性    难实现横向扩展，纵向扩展的空间有限    水平扩展灵活 轻易的通过在集群中增加或者减少硬件数量来实现性能的伸缩<br>6.HBase有哪些类型的访问接口？<br>  HBase提供了Native Java API , HBase Shell , Thrift Gateway , REST GateWay , Pig , Hive 等访问接口。<br>7.HBase中的分区是如何定位的？<br>通过构建的映射表的每个条目包含两项内容，一个是Regionde 标识符，另一个是Region服务器标识，这个条目就标识Region和Region服务器之间的对应关系，从而就可以知道某个Region被保存在哪个Region服务器中。<br>8.试述HBase的三层结构中各层次的名称和作用。<br>层次    名称    作用<br>第一层    Zookeeper文件    记录了-ROOT-表的位置信息<br>第二层    -ROOT-表    记录了.META.表的Region位置信息-ROOT-表只能有一个Region。通过-ROOT-表，就可以访问.META.表中的数据<br>第三层    .META.表    记录了用户数据表的Region位置信息，.META.表可以有多个Region，保存了HBase中所有请阐述在HBase三层结构下，客户端是如何访问到数据的。<br>9.试述HBase系统基本架构以及每个组成部分的作用。<br>（1）客户端<br>客户端包含访问HBase的接口，同时在缓存中维护着已经访问过的Region位置信息，用来加快后续数据访问过程<br>（2）Zookeeper服务器<br>Zookeeper可以帮助选举出一个Master作为集群的总管，并保证在任何时刻总有唯一一个Master在运行，这就避免了Master的“单点失效”问题<br>（3）Master<br>主服务器Master主要负责表和Region的管理工作：管理用户对表的增加、删除、修改、查询等操作；实现不同Region服务器之间的负载均衡；在Region分裂或合并后，负责重新调整Region的分布；对发生故障失效的Region服务器上的Region进行迁移<br>（4）Region服务器<br>Region服务器是HBase中最核心的模块，负责维护分配给自己的Region，并响应用户的读写请求</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.分布式文件系统是如何实现较高水平的扩展的？&lt;br&gt; 分布式文件系统把文件分布存储到多个计算机节点上，成千上万的计算机节点构成计算机集群。&lt;br&gt;2.试述HDFS中的名称节点和数据节点的具体功能。&lt;br&gt;名称节点：负责文件和目录的创建删除和重命名等，管理数据节点和文件块的</summary>
      
    
    
    
    
    <category term="大数据编程 方面的知识要点" scheme="http://senye.ink/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%BC%96%E7%A8%8B-%E6%96%B9%E9%9D%A2%E7%9A%84%E7%9F%A5%E8%AF%86%E8%A6%81%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>Spark</title>
    <link href="http://senye.ink/2021/01/17/spark/"/>
    <id>http://senye.ink/2021/01/17/spark/</id>
    <published>2021-01-17T09:20:24.804Z</published>
    <updated>2021-01-17T09:23:21.947Z</updated>
    
    <content type="html"><![CDATA[<p>1.4v：数据量大、数据类型繁多、处理速度快、价值密度低<br>2.技术层面：数据采集与预处理、数据存储和管理、数据处理和分析、数据可视化、数据安全和隐私保护<br>3.大数据计算模式：批处理mapreduce，流计算storm，图计算pregel，查询分析计算<br>4.Spark 特点 运行速度快，易使用，通用性，运行模式多样<br>5.Yarn负责集群资源调度管理的组件 提高集群利用率，共享底层存储<br>6.Hive基于hadoop的数据仓库工具，可以对hadoop文件中的数据集进行数据整理、特殊查询、分析处理<br>7.hadoop 批处理 spark基于内存（发展早，社区活跃） flink约等于spark  beam<br>8../sbin/start-dfs.sh<br>9.Val 变量名称：数据类型=初始值 不可变<br>10.readInt 导入 scala.io.StdIn<br>11.print（s””）不支持格式化，f支持 等效format<br>12.for(i&lt;- 1 to 5 if i%2=0)<br>13.Array数组是一种可变，可索引，元素具有相同数据类型的数据集合，从0<br>14.Tuple对多个不同类型对象的一种简单封装，从1开始的索引<br>15.容器：列表list从0索引，映射map键值，集合set没有<br>16.序列sequence 元素按特定顺序访问容器<br>17.列表list共享相同类型的不可变的对象序列 head列表第一个元素值，tail除1的新列表  range特殊带索引的不可变数字等差序列，从给定起点到终点所有值<br>18.set不重复元素的容器，包括可变集和不可变<br>19.map，键是唯一的，值不一定<br>20.类用关键字class声明<br>def 方法名（参数列表）：结果类型={方法体}<br>21.类成员默认共有，private本类型和嵌套 protected本类和继承<br>getter  value  setter  value_=<br>22.主构整个类的定义主体就是类的构造器，类方法以外的语句都在构造过程中执行 辅构this定义，返回类型为unit，第一个表达式this（参）已定义的辅或主<br>23.单例对象 伴生和孤立什么是伴生对象，为什么设计apply<br>一个单例对象和它同名类一起出现 伴生对象的方法只能通过伴生对象调用<br>Apply保持对象和函数之间使用的一致性，接受构造参数变成对象<br>Unapply接受一个对象从中提取值<br>24.abstract定义抽象类 类层级结构 any anyval anyRef null nothing<br>25.Option抽象类 子类some有值 none没<br>26.特质 实现代码复用，实现接口  trait定义特质 extends with混入类<br>27.定义函数作为某个类或对象的成员，定义为def。。<br>28.头等公民，类型明确函数接收参数、类型、返回结果，值函数的具体实现<br>29.高阶函数 函数包含其他函数作为其参数或返回结果为一个函数<br>30.Foreach 遍历 map映射filter过滤 reduce规约<br>拆分操作partition、groupedby、grouped、sliding<br>31.Spark的特点：运行速度快，容易使用，通用性，运行模式多样<br>32.大数据包括的类型：批量数据处理，交互式查询，流数据处理<br>33、Spark生态系统包含spark core；spark  sql；spark streaming；mlib；graphx</p><p>关于RDD<br>RDD:是弹性分布式数据集,是分布式内存的一个抽象概念，提供了一种高度受限的共享内存模型;<br>DAG:是有向无环图的简称，反映RDD之间的依赖关系<br>阶段:是作业的基本调度单位，一个作业会分为组任务，每组任务被称为“阶段”，或者也被称为“任务集”。<br>分区：RDD内部并行计算的一个计算单元，RDD的数据集在逻辑上被划分为多个分片，每一个分片称为分区。<br>​窄依赖：一个父RDD的分区对应于一个子RDD的分区，或多个父RDD的分区对应于一个子RDD的分区，无shuffle，平行<br>​宽依赖：一个父RDD的一个分区对应一个子RDD的多个分区，有shuffle， 任务</p><p>​行动”( Action )和“转换” ( Transformation )两种类型、前者用于执行计算并指定输出的形式，后者指定RDD之间的相互依赖关系。两类操作的主要区别是转换操作(比如map、filter、 groupBy、join 等)接受RDD并返回RDD而行动操作(比如count、collect等)接受RDD但是返回非RDD (即输出一个值或结果)。</p><p>关于编程<br>1、统计文本文件中单词出现的频率<br>方法一：<br>“Hello world’’<br>‘’hello china’’<br>scala&gt;Val list1=List(“Hello world”,”Hello china”)<br>scala&gt;Val list2=list1.flatmap(s=&gt;s.split(“ ”))<br>H,e,l,l,o , ,w,o,r,l,d  错<br>Hello，world，hello，china对<br>分析：Hello world—-〉s—–〉对s按照空格进行拆分—-〉得到结果<br>List2：List(“Hello”,”world”,”Hello”,”china”)<br>scala&gt;Val list3=list2.map(x=&gt;(x,1))<br>List3:List(&lt;Hello ,1&gt;,&lt;Hello ,1&gt;,&lt;world,1&gt;,&lt;china,1&gt;),reduce麻烦<br>scala&gt;Val list4=list3.groupBy(x=&gt;x.<em>1)<br>Map(Hello-&gt;List(&lt;Hello,1&gt;,&lt;Hello,1&gt;) ,world-&gt;List(&lt;world,1&gt;) ,china-&gt;List(&lt;china,1) )<br>scala&gt;Val list5=list4.map(x=&gt;(x._1,(x._2).size))<br>得到&lt;hello,2&gt;，&lt;world,1&gt;，&lt;china,1&gt;<br>1,2,3,4,5<br>List(1,2,3,4,5).groupBy(x=&gt;x%3)<br>Map(2-&gt;List(2,5), 1-&gt;List(1,4), 0-&gt;List(3))<br>方法二：<br>import java.io.File<br>import scala.io.Source<br>import collection.mutable.Map<br>object WordCount{<br>     def main(args:Array[String]){<br>        val dirfile=new File(“testfiles”)<br>        val files=dirfile.listFile<br>        val results=Map.empty[String,Int]<br>         for(file&lt;-files){<br>           val data=Source.fromFile(file)<br>           val strs=data.getLines.flatMap{s=&gt;s.split(“  “)}<br>           strs foreach{ word=&gt;<br>                   if (results.contains(word))<br>                   results(word)+=1 else results(word)=1<br>                       }   }<br>           results foreach{case (k,v)=&gt;println(s”$k,$v”)}<br>           }   }<br>统计hello world的行数<br>import  org.apache.spark.sparkContext<br>import  org.apache.spark.sparkContext.</em><br>import  org.apache.spark.sparkConf<br>object HelloWorld{<br>   def main (args:Array[String]){<br>   val conf=new SparkConf().setAppName(“Hello World”).setMaster(“local[2]”)<br>val sc=new SparkContext(conf)<br>val fileRDD=sc.textFile(“hdfs://localhost:9000/examplefile”)<br>val filterRDD=fileRDD.filter(_.contains(“Hello World”))<br>filterRDD.cache()<br>filterRDD.count()    }    }</p><p>2、（1） 该系总共有多少学生；<br>val lines = sc.textFile(“file:///usr/local/spark/sparksqldata/Data01.txt”)<br>val par = lines.map(row=&gt;row.split(“,”)(0))<br>val distinct_par = par.distinct() //去重操作<br>distinct_par.count //取得总数<br>（2） 该系共开设来多少门课程；<br>val lines = sc.textFile(“file:///usr/local/spark/sparksqldata/Data01.txt”)<br>val par = lines.map(row=&gt;row.split(“,”)(1))<br>val distinct_par = par.distinct()<br>distinct_par.count<br>（3） Tom 同学的总成绩平均分是多少；<br>val lines = sc.textFile(“file:///usr/local/spark/sparksqldata/Data01.txt”)<br>val pare = lines.filter(row=&gt;row.split(“,”)(0)==”Tom”)<br>pare.foreach(println)<br>Tom,DataBase,26<br>Tom,Algorithm,12<br>Tom,OperatingSystem,16<br>Tom,Python,40<br>Tom,Software,60<br>pare.map(row=&gt;(row.split(“,”)(0),row.split(“,”)(2).toInt)).mapValues(x=&gt;(x,1)).reduceByKey((x,y ) =&gt; (x._1+y._1,x._2 + y._2)).mapValues(x =&gt; (x._1 / x._2)).collect()<br>（4） 求每名同学的选修的课程门数；<br>val lines = sc.textFile(“file:///usr/local/spark/sparksqldata/Data01.txt”)<br>val pare = lines.map(row=&gt;(row.split(“,”)(0),row.split(“,”)(1)))<br>pare.mapValues(x =&gt; (x,1)).reduceByKey((x,y) =&gt; (“ “,x._2 + y._2)).mapValues(x =&gt;<br>x._2).foreach(println)<br>（5） 该系 DataBase 课程共有多少人选修；<br>val lines = sc.textFile(“file:///usr/local/spark/sparksqldata/Data01.txt”)<br>val pare = lines.filter(row=&gt;row.split(“,”)(1)==”DataBase”)<br>pare.count<br>（6） 各门课程的平均分是多少；<br>val lines = sc.textFile(“file:///usr/local/spark/sparksqldata/Data01.txt”)<br>val pare = lines.map(row=&gt;(row.split(“,”)(1),row.split(“,”)(2).toInt))<br>pare.mapValues(x=&gt;(x,1)).reduceByKey((x,y) =&gt; (x._1+y._1,x._2 + y._2)).mapValues(x =&gt; (x._1/ x._2)).collect()<br>（7）使用累加器计算共有多少人选了 DataBase 这门课。<br>val lines = sc.textFile(“file:///usr/local/spark/sparksqldata/Data01.txt”)<br>val pare = lines.filter(row=&gt;row.split(“,”)(1)==”DataBase”).map(row=&gt;(row.split(“,”)(1),1))<br>val accum = sc.longAccumulator(“My Accumulator”)<br>pare.values.foreach(x =&gt; accum.add(x))<br>accum.value </p><p>对于两个输入文件 A 和 B，编写 Spark 独立应用程序，对两个文件进行合并，并剔除其<br>中重复的内容，得到一个新文件 C。<br>（１）假设当前目录为/usr/local/spark/mycode/remdup，在当前目录下新建一个目录 mkdir -p<br>src/main/scala，然后在目录/usr/local/spark/mycode/remdup/src/main/scala 下新建一个<br>remdup.scala，复制下面代码；<br>object RemDup {<br>def main(args: Array[String]) {<br>val conf = new SparkConf().setAppName(“RemDup”)<br>val sc = new SparkContext(conf)<br>val dataFile = “file:///home/charles/data”<br>val data = sc.textFile(dataFile,2)<br>val res = data.filter(_.trim().length&gt;0).map(line=&gt;(line.trim,””)).partitionBy(new<br>HashPartitioner(1)).groupByKey().sortByKey().keys<br>res.saveAsTextFile(“result”) } }<br>（２）在目录/usr/local/spark/mycode/remdup 目录下新建 simple.sbt，复制下面代码：<br>name := “Simple Project”<br>version := “1.0”<br>scalaVersion := “2.11.8”<br>libraryDependencies += “org.apache.spark” %% “spark-core” % “2.1.0”<br>（３）在目录/usr/local/spark/mycode/remdup 下执行下面命令打包程序<br>$ sudo /usr/local/sbt/sbt package<br>（４）最后在目录/usr/local/spark/mycode/remdup 下执行下面命令提交程序<br>$ /usr/local/spark2.0.0/bin/spark-submit –class “RemDup”<br>/usr/local/spark2.0.0/mycode/remdup/target/scala-2.11/simple-project_2.11-1.0.jar<br>（５）在目录/usr/local/spark/mycode/remdup/result 下即可得到结果文件。</p><p>每个输入文件表示班级学生某个学科的成绩，每行内容由两个字段组成，第一个是学生<br>名字，第二个是学生的成绩；编写 Spark 独立应用程序求出所有学生的平均成绩，并输出到一个新文件中。<br>（１）假设当前目录为/usr/local/spark/mycode/avgscore，在当前目录下新建一个目录 mkdir -p<br>src/main/scala，然后在目录/usr/local/spark/mycode/avgscore/src/main/scala 下新建一个<br>avgscore.scala<br>object AvgScore {<br>def main(args: Array[String]) {<br>val conf = new SparkConf().setAppName(“AvgScore”)<br>val sc = new SparkContext(conf)<br>val dataFile = “file:///home/charles/data”<br>val data = sc.textFile(dataFile,3)<br>val res = data.filter(_.trim().length&gt;0).map(line=&gt;(line.split(“ “)(0).trim(),line.split(“<br>“)(1).trim().toInt)).partitionBy(new HashPartitioner(1)).groupByKey().map(x =&gt; {<br>var n = 0<br>var sum = 0.0<br>for(i &lt;- x._2){<br>sum = sum + i<br>n = n +1 }<br>val avg = sum/n<br>val format = f”$avg%1.2f”.toDouble<br>(x._1,format) })<br>res.saveAsTextFile(“result”) } }<br>（２）在目录/usr/local/spark/mycode/avgscore 目录下新建 simple.sbt，复制下面代码：<br>name := “Simple Project”<br>version := “1.0”<br>scalaVersion := “2.11.8”<br>libraryDependencies += “org.apache.spark” %% “spark-core” % “2.1.0”<br>（３）在目录/usr/local/spark/mycode/avgscore 下执行下面命令打包程序<br>$ sudo /usr/local/sbt/sbt package<br>（４）最后在目录/usr/local/spark/mycode/avgscore 下执行下面命令提交程序<br>$ /usr/local/spark2.0.0/bin/spark-submit –class “AvgScore”<br>/usr/local/spark2.0.0/mycode/avgscore/target/scala-2.11/simple-project_2.11-1.0.jar<br>（５）在目录/usr/local/spark/mycode/avgscore/result 下即可得到结果文件。 </p><p>Scala词频统计<br>val list1=List(“Hello world”,”Hello china”)<br>Val list2=list1.flatmap(s=&gt;s.split(“ ”))<br>Val list3=list2.map(s=&gt;(s,1))<br>Val list4=list3.groupBy(x=&gt;x._1)<br>Val list5=list4.map(x=&gt;(x._1,(x._2).size))</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.4v：数据量大、数据类型繁多、处理速度快、价值密度低&lt;br&gt;2.技术层面：数据采集与预处理、数据存储和管理、数据处理和分析、数据可视化、数据安全和隐私保护&lt;br&gt;3.大数据计算模式：批处理mapreduce，流计算storm，图计算pregel，查询分析计算&lt;br&gt;4.</summary>
      
    
    
    
    
    <category term="关于spark的一些基础知识" scheme="http://senye.ink/tags/%E5%85%B3%E4%BA%8Espark%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Maven</title>
    <link href="http://senye.ink/2021/01/17/maven/"/>
    <id>http://senye.ink/2021/01/17/maven/</id>
    <published>2021-01-17T09:10:59.641Z</published>
    <updated>2021-01-17T09:17:21.314Z</updated>
    
    <content type="html"><![CDATA[<p>1、解决依赖管理冲突的原则 路径优先原则 ，相同路径，第一声明者优先原则    。</p><p>2.Maven是Apache下的一个开源项目，它是一个项目管理工具，它用于对java项目进行   项目构建   、    依赖管理  及  项目信息管理     。</p><p>3.一个项目的生理周期构建过程为：清理、编译、测试、报告、打包、部署。 </p><p>4.Maven包含了一个项目对象模型，一组标准集合，一个项目生命周期，一个依赖管理系统，和用来运行定义在生命周期阶段中插件目标的逻辑。</p><p>5.maven管理项目生命周期过程都是基于插件完成的</p><p>6.设置系统环境变量：M2_HOME path环境变量：%M2_HOME%\bin</p><p>7.项目对象模型: 通过pom.xml定义项目的坐标、项目依赖、项目信息、插件目标</p><p>8.项目依赖struts2.3.24，通过在pom.xml中定义依赖即可将struts2的jar包自动加入工程。</p><p>关于简答</p><p>1.简述什么是Maven坐标，由哪些标签组成，分别代表什么，为什么要使用坐标。</p><p>（1）Maven坐标是可以标识平面内的一个点</p><p> 由groupid 定义maven项目的隶属目录</p><p>artifactID 定义实际项目中的一个模块</p><p>version 定义该项目的版本号</p><p>packaging  定义该项目的打包方式</p><p>（坐标决定了Maven的唯一性）</p><p>（2）为什么要使用坐标</p><p>Maven世界中有大量的构建，我们需要用一个唯一标识一个构建的统一规范</p><p>有了统一规范，就可以把查找工作交给机器来做</p><p>2.简述本地仓库与远程仓库的不同。</p><p>本地仓库：一个用户只有一个本地仓库，需要从中央仓库下载，资源存放在本地仓库</p><p>远程仓库：1中央仓库，maven的默认远程仓库</p><p>​       2 .私服，一个特殊的远程仓库，用于在局域网内的仓库</p><p>​                3.镜像：用来替代中央仓库，速度比一般仓库快</p><p>​    </p><p>3.简述Maven的作用和意义。</p><p><strong>–</strong> <strong><em>\</em>拥有约定，知道你的代码在哪里，放到哪里去**</strong></p><p><strong>–</strong> <strong><em>\</em>拥有一个生命周期，例如执行**</strong> <strong><em>\</em>mvn install**</strong> <strong><em>\</em>就可以自动执行编译，测试，打包等构建过程**</strong></p><p><strong>–</strong> <strong><em>\</em>只需要定义一个*****</strong>*pom.xml,*<strong>**</strong>*然后把源码放到默认的目录，**<strong><strong><em>\</em>Maven***</strong></strong>*帮你处理其他事情****</p><p><strong>–</strong> <strong><em>\</em>拥有依赖管理，仓库管理**</strong></p><p>4.Maven项目约定由哪几个目录结构组成，分别存放哪些文件。</p><p>Src/main/java 存放项目的.java文件</p><p>Src/main/resource 存放项目的资源文件</p><p>Src/test/java 存放所有测试.java文件</p><p>Src/test/resource 存放项目的测试资源文件</p><p>Target 项目输出位置</p><p>Pom.xml</p><p>5.三大生命周期</p><p>clean:清理项目</p><p>default：构建项目</p><p>site：生成项目站点的</p><p>6.Maven安装目录分析：</p><p>Bin目录： Maven的运行脚本</p><p>boot目录:Maven自己的类加载器</p><p>conf 目录：含有setting.xml配置文件</p><p>lib ：Maven运行时所需的java类库、</p><p>7.系统报错说没有找到依赖，报错的原因是找不到依赖的Hello项目，HelloFriend中需要调用Hello类，并且在pom.xml中有依赖，但是在库中没有添加进来，所以会报错。故需要将Hello项目的jar包放入仓库中，执行mvn </p><p>Install命令，执行完该命令后再查看仓库，多了cn的文件夹。</p><p>8.scope 用来控制依赖和编译，测试，运行的classpath的关系 </p><p>依赖关系：</p><p>1.compile： 默认编译依赖范围。对于编译，测试，运行三种classpath都有效</p><p>2.test：测试依赖范围。只对于测试classpath有效</p><p>3.provided：已提供依赖范围。对于编译，测试的classpath都有效，但对于运行无效。因为由容器已经提供，例如servlet-api（Tomcat）</p><p>4.runtime:运行时提供。例如:jdbc驱动</p><p>9.Maven项目步骤:</p><p>1 建立Hello项目同时建立Maven约定的项目目录结构</p><p>2 在项目Hello根目录建立pom.xml</p><p>3 在src/main/java/cn/rjxy/maven目录下新建文件Hello.java</p><p>4 在/src/test/java/cn/rjxy/maven目录下新建测文件HelloTest.java</p><p>5 打开cmd命令行，进入Hello项目根目录执行 mvn compile命令，查看根目录变化</p><p> cmd中继续录入mvn clean命令，然后再次查看根目录变化</p><p> cmd中录入mvn clean compile命令，查看根目录变化</p><p> cmd中录入mvn  clean test命令，查看根目录变化</p><p> cmd中录入mvn clean package命令，查看根本录变化</p><p>6新建第二个项目模块hellofriend目录及约定的目录结构</p><p>7在项目hellofriend根目录建立pom.xml</p><p>8在src/main/java/cn/rjxy/maven目录下新建文件hello friend.java</p><p>9在/src/test/java/cn/rjxy/maven目录下新建测试文件hellofriendtest.java</p><p>10 在hellofriend目录下执行命令 mvn package</p><p>11 需要重新构建hello第一个项目并将jar包放入仓库中，在命令行根目录下执行 mvn clean install</p><p>12 重新在hello friend 目录下执行命令mvn package </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1、解决依赖管理冲突的原则 路径优先原则 ，相同路径，第一声明者优先原则    。&lt;/p&gt;
&lt;p&gt;2.Maven是Apache下的一个开源项目，它是一个项目管理工具，它用于对java项目进行   项目构建   、    依赖管理  及  项目信息管理     。&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
    <category term="关于maven的一些基础知识" scheme="http://senye.ink/tags/%E5%85%B3%E4%BA%8Emaven%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>dos</title>
    <link href="http://senye.ink/2020/10/10/lo/"/>
    <id>http://senye.ink/2020/10/10/lo/</id>
    <published>2020-10-10T08:56:07.000Z</published>
    <updated>2020-10-10T09:28:01.081Z</updated>
    
    <content type="html"><![CDATA[<p>用dos命令在桌面创建java并运行[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-J69ZVhZA-1590658049693)(D:\dev\blog\source_posts\lo\dos.png)]</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;用dos命令在桌面创建java并运行[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-J69ZVhZA-1590658049693)(D:\dev\blog\source_posts\lo\dos.png)]&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="dos" scheme="http://senye.ink/tags/dos/"/>
    
  </entry>
  
  <entry>
    <title>初来乍到</title>
    <link href="http://senye.ink/2020/10/06/firstblog-md/"/>
    <id>http://senye.ink/2020/10/06/firstblog-md/</id>
    <published>2020-10-06T11:38:21.769Z</published>
    <updated>2021-01-17T09:10:00.694Z</updated>
    
    <content type="html"><![CDATA[<p>这是我的第一篇博客，同时也是自己用hexo和github搭建的第一个网站，内心无比激动，经过两天断断续续的查csdn与实践，终于，终于，终于到了发表文章这一步了！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这是我的第一篇博客，同时也是自己用hexo和github搭建的第一个网站，内心无比激动，经过两天断断续续的查csdn与实践，终于，终于，终于到了发表文章这一步了！&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="myfirst" scheme="http://senye.ink/tags/myfirst/"/>
    
  </entry>
  
</feed>
