<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>sen</title>
  
  
  <link href="http://senye.ink/atom.xml" rel="self"/>
  
  <link href="http://senye.ink/"/>
  <updated>2021-06-28T14:51:26.753Z</updated>
  <id>http://senye.ink/</id>
  
  <author>
    <name>zhangsen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>day06</title>
    <link href="http://senye.ink/2021/06/28/day06/"/>
    <id>http://senye.ink/2021/06/28/day06/</id>
    <published>2021-06-28T14:20:27.044Z</published>
    <updated>2021-06-28T14:51:26.753Z</updated>
    
    <content type="html"><![CDATA[<h6 id="编译时期检测所有的代码"><a href="#编译时期检测所有的代码" class="headerlink" title="编译时期检测所有的代码"></a>编译时期检测所有的代码</h6><p>运行时期进行逻辑运算</p><p>百鸡问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ANS</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> z=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>( x=<span class="number">0</span>;x&lt;<span class="number">33</span>;x++)&#123;</span><br><span class="line">       <span class="keyword">for</span> ( y=<span class="number">0</span>;y&lt;<span class="number">50</span>;y++)&#123;</span><br><span class="line">       z=<span class="number">100</span>-x-y;</span><br><span class="line">       <span class="keyword">if</span>(z%<span class="number">3</span>==<span class="number">0</span>)&#123;</span><br><span class="line">       <span class="keyword">if</span> ((<span class="number">3</span>*x+<span class="number">2</span>*y+z/<span class="number">3</span>)==<span class="number">100</span>) &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;公鸡数&quot;</span>+x+<span class="string">&quot;,母鸡数&quot;</span>+y+<span class="string">&quot;，小鸡数&quot;</span>+z);</span><br><span class="line">       <span class="comment">// expression</span></span><br><span class="line">       &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       &#125;</span><br><span class="line">        &#125;</span><br><span class="line">   </span><br><span class="line">   &#125;&#125;</span><br></pre></td></tr></table></figure><p>//二分(折半)查找—二分算法在查找的应用<br>//定义三个下标用变量来表示<br>int min=0;<br>int max=arr.length-1;//长度值-1<br>int mid=(min+max)/2;<br>//循环–while<br>while(num!=arr[mid])//中间下标对应的元素值不相等才进循环操作<br>//如果查找数大于中间下标对应的元素值<br> if(max&gt;=min)<br>min=mid+1; }<br>//如果查找数小于中间下标对应的元素值</p><p> if(num&lt;arr[mid])(<br>//把最大下标往左挪动</p><p>max=mid-1;}</p><p> //查找数不存在情况<br> if(min&gt;max)l<br> System.outprintIn(“查无此数”);<br> break; }<br>int mid=(min+max)/2;<br>//重新计算中间下标<br> mid=(min+max)/2; }<br>//if(max&gt;=min)<br> System.out.printIn(mid); </p><p>第六天 加油</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h6 id=&quot;编译时期检测所有的代码&quot;&gt;&lt;a href=&quot;#编译时期检测所有的代码&quot; class=&quot;headerlink&quot; title=&quot;编译时期检测所有的代码&quot;&gt;&lt;/a&gt;编译时期检测所有的代码&lt;/h6&gt;&lt;p&gt;运行时期进行逻辑运算&lt;/p&gt;
&lt;p&gt;百鸡问题&lt;/p&gt;
&lt;figure</summary>
      
    
    
    
    
    <category term="关于实训" scheme="http://senye.ink/tags/%E5%85%B3%E4%BA%8E%E5%AE%9E%E8%AE%AD/"/>
    
  </entry>
  
  <entry>
    <title>day05</title>
    <link href="http://senye.ink/2021/06/25/day05/"/>
    <id>http://senye.ink/2021/06/25/day05/</id>
    <published>2021-06-25T13:54:45.452Z</published>
    <updated>2021-06-25T14:02:26.246Z</updated>
    
    <content type="html"><![CDATA[<h6 id="循环控制语句"><a href="#循环控制语句" class="headerlink" title="循环控制语句"></a>循环控制语句</h6><p> for循环</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* </span><br><span class="line">    for循环</span><br><span class="line">        格式</span><br><span class="line">            for(初始值；判断值；控制条件)&#123;</span><br><span class="line">            循环体；</span><br><span class="line">            &#125;</span><br><span class="line">        执行流程 </span><br><span class="line">            根据初始值和判断条件进行比较，如果比较大结果是true执行循环体，执行控制条件改变初始化值，拿着改变的值再和判断条件进行比较，如果比较的结果是true重复上述操作直到比较结果是false才结束循环</span><br><span class="line">            *&#x2F;</span><br></pre></td></tr></table></figure><p>求1-10的和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int sum&#x3D;0;</span><br><span class="line">       </span><br><span class="line">        for(int s&#x3D;1;s&lt;11;s++)&#123;</span><br><span class="line">         sum&#x3D;sum+s;&#x2F;&#x2F;sum+&#x3D;i;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum);</span><br></pre></td></tr></table></figure><p>求1-100偶数的和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int su&#x3D;0;</span><br><span class="line">        for(int a&#x3D;1;a&lt;100;a++)&#123;</span><br><span class="line">        if ((a&amp;1)&#x3D;&#x3D;0) &#123;</span><br><span class="line">        su+&#x3D;a;</span><br><span class="line">        &#x2F;&#x2F; expression</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(su);</span><br></pre></td></tr></table></figure><p>求5的阶乘</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int cj&#x3D;1;</span><br><span class="line">        for (int i&#x3D;5;i&gt;&#x3D;1;i--)&#123;</span><br><span class="line">        cj*&#x3D;i;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(cj);</span><br></pre></td></tr></table></figure><p>输出所有的水仙花数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for(int i&#x3D;100;i&lt;1000;i++)&#123;</span><br><span class="line">        &#x2F;&#x2F;&#x2F;获取三位数的每一位</span><br><span class="line">        int g&#x3D;i%10;</span><br><span class="line">        int s&#x3D;i&#x2F;10%10;</span><br><span class="line">        int b&#x3D;i&#x2F;100;</span><br><span class="line">        if (i&#x3D;&#x3D;(g*g*g+s*s*s+b*b*b)) &#123;</span><br><span class="line">        System.out.println(i);</span><br></pre></td></tr></table></figure><p>while循环</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">初始化值；</span><br><span class="line">           while(判断条件)&#123;</span><br><span class="line">           循环体；</span><br><span class="line">           控制条件；</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><p>dowhile循环</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">初始值；</span><br><span class="line">    do&#123;</span><br><span class="line">     循环体；</span><br><span class="line">     控制条件；</span><br><span class="line">    &#125; while（判断条件）；</span><br></pre></td></tr></table></figure><p><img src="/.ink//dev\blog\source\img\fc402ecde2d39d754eb4070ba1a34b1.png"></p><p>打印9*9乘法表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">for(int i&#x3D;1;i&lt;10;i++)&#123;</span><br><span class="line">    for(int a&#x3D;1;a&lt;&#x3D;i;a++)&#123;</span><br><span class="line">   </span><br><span class="line">    System.out.print(i+&quot;*&quot;+a+&quot;&#x3D;&quot;+i*a+&#39; &#39;);  &#x2F;&#x2F;注意“”和＋号连接一起！ </span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="控制跳转语句"><a href="#控制跳转语句" class="headerlink" title="控制跳转语句"></a>控制跳转语句</h6><p>break—跳出当前循环不执行</p><p>continue—跳出当次循环</p><p>return— （方法）</p><h6 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h6><p>​    概念：存储多个相同类型元素的容器</p><p>​    定义：数据类型【】 数组名=new 数据类型【数组长度、元素个数】；</p><p>​             int[] arr=new int[3];//定义出长度为3的整型数组arr  支持分为声名和初始化两个过程 给定元素值，长度就确定了。                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     </p><p>​                                                                                      </p><p>​           </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h6 id=&quot;循环控制语句&quot;&gt;&lt;a href=&quot;#循环控制语句&quot; class=&quot;headerlink&quot; title=&quot;循环控制语句&quot;&gt;&lt;/a&gt;循环控制语句&lt;/h6&gt;&lt;p&gt; for循环&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;</summary>
      
    
    
    
    
    <category term="关于实训" scheme="http://senye.ink/tags/%E5%85%B3%E4%BA%8E%E5%AE%9E%E8%AE%AD/"/>
    
  </entry>
  
  <entry>
    <title>day04</title>
    <link href="http://senye.ink/2021/06/24/day04/"/>
    <id>http://senye.ink/2021/06/24/day04/</id>
    <published>2021-06-24T14:02:24.129Z</published>
    <updated>2021-06-24T14:25:24.797Z</updated>
    
    <content type="html"><![CDATA[<p>键盘录入<br>//导包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line">class JavaDemo&#123;</span><br><span class="line">public static void main (String [] args) &#123;</span><br><span class="line">      Scanner sc&#x3D;new Scanner(System.in);</span><br><span class="line">    int num &#x3D;sc.nextInt();&#x2F;&#x2F;获取整数</span><br><span class="line">        String s&#x3D;sc.nextLine();&#x2F;&#x2F;获取一行转成字符串</span><br><span class="line">        System.out.println(num);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​                    </span><br><span class="line"></span><br><span class="line">​            &#125;</span><br><span class="line">​    &#125;</span><br></pre></td></tr></table></figure><hr><p>​        1.导包<br>​                   import java.util.Scanner;<br>​                2.获取Scanner<br>​                   Scanner sc=new Scanner(System.in);<br>​                3.获取数据<br>​                   sc.nextInt();获取数据<br>​                   sc.nextline（）；获取一行<br>​                流程控制语句<br>​                 顺序结构<br>​                    从上往下总左往右依次编译执行（绝大部分代码）<br>​                 选择结构<br>​                   if 语句<br>​                       if语句格式一<br>​                       if语句格式二<br>​                       if语句格式三<br>​                   switch 语句<br>​                   1.表达式支持byte short int char 从jdk1.5开始支持枚举，从jdk1.7开始支持String类型<br>​                   2.case的值都是常量 不能重复<br>​                   3.支持省略break 省略break会出现case穿透效果<br>​                   4.支持省略default<br>​                   5.switch语句结束的标志 {1.遇见break 2.执行到代码的最后一行}<br>​                 循环结构、<br>​                  流程执行  ：先去计算出表达式的值 拿着这个计算出的值和所有的case值进行比较如果有相等的就执行对应的case语句体，执行完语句体执行break<br>​                 switch 语句执行结束 如果计算出的值和所有的case的值都不相等执行default对应的语句体结着执行break，switch语句结束。   </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;键盘录入&lt;br&gt;//导包&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/</summary>
      
    
    
    
    
    <category term="关于实训" scheme="http://senye.ink/tags/%E5%85%B3%E4%BA%8E%E5%AE%9E%E8%AE%AD/"/>
    
  </entry>
  
  <entry>
    <title>day03</title>
    <link href="http://senye.ink/2021/06/23/day03/"/>
    <id>http://senye.ink/2021/06/23/day03/</id>
    <published>2021-06-23T13:54:47.231Z</published>
    <updated>2021-06-23T13:55:48.997Z</updated>
    
    <content type="html"><![CDATA[<p>随手记一下下 嘻嘻 今天是开始学习的第三天 逐渐适应了这里的生活方式 早起 挤公交 吃早饭 上课 吃午饭 上课 吃完饭 自习 从7点到9.40 可是安排的满满当当的了 刚想说这里原来有台电脑能自己看网课刷视频了呢 今天下午倒好 直接给整的限流了 我日 这又得拿着小手机去看视频了 哎 mad 这基地唬人呢 先完完全全拖协 想干嘛干嘛 这才两天呀 可是我这两天的眼皮它一直跳一直跳 我也不想让它跳 不过 我不迷信^_^ 今天吃饭莫名其妙就奔50了 我好像也没有吃啥呀 都没有喝汤汤 一直喝教室白开水了还  离谱奥  我听到老李给我说要奋斗    150万是小目标 娶自己的女朋友 感觉这些事情离自己好近  玩命搞钱 冲！</p><p>Java是一门强类型语言，要求Java中所有的数据都要有数据类型的表示、<br>编译Java文件的命令：javac<br>java编译之后产生.class文件<br>java能够跨平台的基础JVM<br>1.在Java中初始化进行赋值时 如果给定的是整数那么这个整数的类型默认为int类型<br>2.在整数后面加上L/l 此时整数的类型指定为了long类型<br>3.在Java中初始化进行赋值时 如果给定的是小数那么这个小数的类型默认为double类型<br>4.在小数后面加上F/f 此时小数类型指定为float类型<br>5.变量的定义分为声明和初始化两个过程<br>6.变量在哪定义在哪使用<br>“A”—–65     “a”—–97<br>类型提升（包含被包含）<br>       从小到大 ：byte-short      char-int-long-float-double<br>                             BS    CILFD   记<br>        byte short char 无论做任何操作都会类型提升为int<br>   小数强制类型转换成整数时可能会出现舍弃<br>运算符<br>      算术运算符<br>          +   -   *  /  %    ++    –<br>      +： 求和 拼接 字符串连接符<br>      -： 求差<br>      ++：单独运算 在操作数前面先加1再赋值  在操作数的后面先赋值再加1<br>      byte b=127;//++含义强制类型转换！！！<br>        b++;//int 128    (byte)—–  -128<br>      赋值运算符<br>                   =（把右边的值赋值给左边）<br>                   +=  -=  *=  /=  %=  &amp;=(按位与等）|=（按位或等）<br>              java中不准出现连等定义 int a=b=c=4<br>                       允许出现连等赋值<br>       比较（关系）运算符   、<br>   比较运算符的结果一定是一个布尔值<br>       逻辑运算符<br>              &amp;：遇见false就是false<br>              | ：遇见true就是true<br>              ^:相同为false 不同为true<br>              ! :取反 （false变true true变false 几十个非结果取反 偶数个非结果不变） </p><pre><code>   位运算符   三目（元）运算符</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;随手记一下下 嘻嘻 今天是开始学习的第三天 逐渐适应了这里的生活方式 早起 挤公交 吃早饭 上课 吃午饭 上课 吃完饭 自习 从7点到9.40 可是安排的满满当当的了 刚想说这里原来有台电脑能自己看网课刷视频了呢 今天下午倒好 直接给整的限流了 我日 这又得拿着小手机去看视</summary>
      
    
    
    
    
    <category term="关于实训" scheme="http://senye.ink/tags/%E5%85%B3%E4%BA%8E%E5%AE%9E%E8%AE%AD/"/>
    
  </entry>
  
  <entry>
    <title>day02</title>
    <link href="http://senye.ink/2021/06/22/day02/"/>
    <id>http://senye.ink/2021/06/22/day02/</id>
    <published>2021-06-22T13:39:32.763Z</published>
    <updated>2021-06-22T13:40:26.712Z</updated>
    
    <content type="html"><![CDATA[<p>53个关键字 全部是小写<br>   const goto 原来不是叫保留字 现在是了在新的jdk版本中<br>标识符 —-在java中可以自定义的名称<br> 组成范围 </p><ol><li>各国常见文字<ol start="2"><li>数字 0-9 </li></ol></li><li>特殊的符号  _和 $（慎用—内部类会使用）<br>命名规则<br>1.不能出现关键字<br>2.不能以数字开头<br>在组成范围内的内容且遵守命名规则的是符合ja0 va语法的标识符（合法）<br>驼峰命令法（在标识符合法的基础上）<br>1.类名/接口名——XxxYyyZzz<br>2.方法名/变量名——-xxxYyyZzz<br>3.包名—— 包是用来区分同名类的 （单级文件夹—-xxx cn。   多级文件夹——xxx.yyy.zzz。  tedu.cn.day01<br>4.见名知意<br>注释 /*   */ 多行注释  单行注释 //<br>文档注释 /** */ 可以通过javadoc命令生成解释说明的文档<br>常量<br>程序运行过程中不发生改变的值<br>分类<br> 字面量常值      整数常量 1000 1839<pre><code>                小数常量 1.1 3.3                 字符串常量 “12” “guii”                字符常量“u”                布尔常量 true false                 空常量 null </code></pre>整数表示方式<br>二进制 由0和1表示 以0b开头的数据就是二进制数据 0b 1000<br>八进制  由0-7表示 以0开头的数据就是八进制数据<br>十进制<br>十六进制<br>其他进制转换成十进制<br>总结规律：项乘以基数为底的权次幂之和<br>十进制转换为其他进制<br>总结规律<br>除基取余 直到商为0 余数翻转<br>有符号的数<br>  计算机上所有的数据都在底层都是以二进制数据的补码形式来表示的<br>数据类型 ：限制数据变化范围<br>变量名：区分其他变量<br>初始化：给变量赋值</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;53个关键字 全部是小写&lt;br&gt;   const goto 原来不是叫保留字 现在是了在新的jdk版本中&lt;br&gt;标识符 —-在java中可以自定义的名称&lt;br&gt; 组成范围 &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;各国常见文字&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;数字 0-9 &lt;/li&gt;</summary>
      
    
    
    
    
    <category term="关于实训" scheme="http://senye.ink/tags/%E5%85%B3%E4%BA%8E%E5%AE%9E%E8%AE%AD/"/>
    
  </entry>
  
  <entry>
    <title>day01</title>
    <link href="http://senye.ink/2021/06/22/day01/"/>
    <id>http://senye.ink/2021/06/22/day01/</id>
    <published>2021-06-22T13:36:00.273Z</published>
    <updated>2021-06-22T13:39:16.236Z</updated>
    
    <content type="html"><![CDATA[<p>jre (java 运行时环境)—-提供java程序的运行环境<br> jre=jvm+运行类库<br>jdk (java 开发工具包） —- 提供java程序的运行环境和开发环境<br> jdk=jre+kit (开发工具包）<br>java 三大结构：j2se 提供桌面服务及小程序开发<br>                       j2ee 提供企业集中式开发<br>                       j2me 提供嵌入式开发<br>jdk的安装目录指定位置不能有中文和空格<br> 人机交互方式： 图形式交互 命令式交互<br>命令提示符的查找方式 ：win+R –cmd<br>                                     在地址栏中输入cmd （比较灵活）<br>命令提示符常用指令（DOS常用指令—低级编程语言）<br>                   ：cd    —–跳转到指定目录(文件夹）<br>                       cd..  —–返回上一层<br>                       cd/   —-当前盘符的根目录<br>环境变量 ：可以指定的操作的值<br>Path=jdk安装位置、bin;<br>D:\Program Files\Java\jdk1.8.0_45\bin<br>JAVA_HOME 自定义的环境变量jdk安装位置</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;jre (java 运行时环境)—-提供java程序的运行环境&lt;br&gt; jre=jvm+运行类库&lt;br&gt;jdk (java 开发工具包） —- 提供java程序的运行环境和开发环境&lt;br&gt; jdk=jre+kit (开发工具包）&lt;br&gt;java 三大结构：j2se 提供桌面</summary>
      
    
    
    
    
    <category term="关于实训" scheme="http://senye.ink/tags/%E5%85%B3%E4%BA%8E%E5%AE%9E%E8%AE%AD/"/>
    
  </entry>
  
  <entry>
    <title>大数据编程</title>
    <link href="http://senye.ink/2021/01/17/dashuju/"/>
    <id>http://senye.ink/2021/01/17/dashuju/</id>
    <published>2021-01-17T10:03:02.624Z</published>
    <updated>2021-01-17T10:16:37.967Z</updated>
    
    <content type="html"><![CDATA[<p>1.分布式文件系统是如何实现较高水平的扩展的？<br> 分布式文件系统把文件分布存储到多个计算机节点上，成千上万的计算机节点构成计算机集群。<br>2.试述HDFS中的名称节点和数据节点的具体功能。<br>名称节点：负责文件和目录的创建删除和重命名等，管理数据节点和文件块的映射关系。<br>数据节点：负责数据的存储和读取。<br>3.在分布式文件系统中，中心节点的设计至关重要，请阐述HDFS是如何减轻中心节点的负担的。<br>名称节点不参与数据的传输。<br>4.试述HDFS的冗余数据保存策略。<br>HDFS采用多副本方式对数据进行冗余存储，通常一个数据块的多个副本会被分不到不同的数据节点上。<br>5.请阐述HBase和传统关系数据库的区别。<br> 主要体现在6个方面。<br>主要方面    关系数据库    HBase<br>数据类型    关系模型 丰富的数据类型和存储方式    简单的数据模型 数据存储为未经解释的字符串<br>数据操作    丰富 插入 删除 更行 查询等 多表连接    不存在复杂的表与表之间的关系 仅插入 查询 删除 清空等<br>存储模式    基于行模式存储    基于列存储<br>数据索引    针对不同列构建复杂的多个索引，提高数据访问性能    索引是行键<br>数据维护    更行操作用最新的当前值替换记录中原来的旧值    更新操作不删除数据旧的版本<br>可伸缩性    难实现横向扩展，纵向扩展的空间有限    水平扩展灵活 轻易的通过在集群中增加或者减少硬件数量来实现性能的伸缩<br>6.HBase有哪些类型的访问接口？<br>  HBase提供了Native Java API , HBase Shell , Thrift Gateway , REST GateWay , Pig , Hive 等访问接口。<br>7.HBase中的分区是如何定位的？<br>通过构建的映射表的每个条目包含两项内容，一个是Regionde 标识符，另一个是Region服务器标识，这个条目就标识Region和Region服务器之间的对应关系，从而就可以知道某个Region被保存在哪个Region服务器中。<br>8.试述HBase的三层结构中各层次的名称和作用。<br>层次    名称    作用<br>第一层    Zookeeper文件    记录了-ROOT-表的位置信息<br>第二层    -ROOT-表    记录了.META.表的Region位置信息-ROOT-表只能有一个Region。通过-ROOT-表，就可以访问.META.表中的数据<br>第三层    .META.表    记录了用户数据表的Region位置信息，.META.表可以有多个Region，保存了HBase中所有请阐述在HBase三层结构下，客户端是如何访问到数据的。<br>9.试述HBase系统基本架构以及每个组成部分的作用。<br>（1）客户端<br>客户端包含访问HBase的接口，同时在缓存中维护着已经访问过的Region位置信息，用来加快后续数据访问过程<br>（2）Zookeeper服务器<br>Zookeeper可以帮助选举出一个Master作为集群的总管，并保证在任何时刻总有唯一一个Master在运行，这就避免了Master的“单点失效”问题<br>（3）Master<br>主服务器Master主要负责表和Region的管理工作：管理用户对表的增加、删除、修改、查询等操作；实现不同Region服务器之间的负载均衡；在Region分裂或合并后，负责重新调整Region的分布；对发生故障失效的Region服务器上的Region进行迁移<br>（4）Region服务器<br>Region服务器是HBase中最核心的模块，负责维护分配给自己的Region，并响应用户的读写请求</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.分布式文件系统是如何实现较高水平的扩展的？&lt;br&gt; 分布式文件系统把文件分布存储到多个计算机节点上，成千上万的计算机节点构成计算机集群。&lt;br&gt;2.试述HDFS中的名称节点和数据节点的具体功能。&lt;br&gt;名称节点：负责文件和目录的创建删除和重命名等，管理数据节点和文件块的</summary>
      
    
    
    
    
    <category term="大数据编程 方面的知识要点" scheme="http://senye.ink/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%BC%96%E7%A8%8B-%E6%96%B9%E9%9D%A2%E7%9A%84%E7%9F%A5%E8%AF%86%E8%A6%81%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>Spark</title>
    <link href="http://senye.ink/2021/01/17/spark/"/>
    <id>http://senye.ink/2021/01/17/spark/</id>
    <published>2021-01-17T09:20:24.804Z</published>
    <updated>2021-01-17T09:23:21.947Z</updated>
    
    <content type="html"><![CDATA[<p>1.4v：数据量大、数据类型繁多、处理速度快、价值密度低<br>2.技术层面：数据采集与预处理、数据存储和管理、数据处理和分析、数据可视化、数据安全和隐私保护<br>3.大数据计算模式：批处理mapreduce，流计算storm，图计算pregel，查询分析计算<br>4.Spark 特点 运行速度快，易使用，通用性，运行模式多样<br>5.Yarn负责集群资源调度管理的组件 提高集群利用率，共享底层存储<br>6.Hive基于hadoop的数据仓库工具，可以对hadoop文件中的数据集进行数据整理、特殊查询、分析处理<br>7.hadoop 批处理 spark基于内存（发展早，社区活跃） flink约等于spark  beam<br>8../sbin/start-dfs.sh<br>9.Val 变量名称：数据类型=初始值 不可变<br>10.readInt 导入 scala.io.StdIn<br>11.print（s””）不支持格式化，f支持 等效format<br>12.for(i&lt;- 1 to 5 if i%2=0)<br>13.Array数组是一种可变，可索引，元素具有相同数据类型的数据集合，从0<br>14.Tuple对多个不同类型对象的一种简单封装，从1开始的索引<br>15.容器：列表list从0索引，映射map键值，集合set没有<br>16.序列sequence 元素按特定顺序访问容器<br>17.列表list共享相同类型的不可变的对象序列 head列表第一个元素值，tail除1的新列表  range特殊带索引的不可变数字等差序列，从给定起点到终点所有值<br>18.set不重复元素的容器，包括可变集和不可变<br>19.map，键是唯一的，值不一定<br>20.类用关键字class声明<br>def 方法名（参数列表）：结果类型={方法体}<br>21.类成员默认共有，private本类型和嵌套 protected本类和继承<br>getter  value  setter  value_=<br>22.主构整个类的定义主体就是类的构造器，类方法以外的语句都在构造过程中执行 辅构this定义，返回类型为unit，第一个表达式this（参）已定义的辅或主<br>23.单例对象 伴生和孤立什么是伴生对象，为什么设计apply<br>一个单例对象和它同名类一起出现 伴生对象的方法只能通过伴生对象调用<br>Apply保持对象和函数之间使用的一致性，接受构造参数变成对象<br>Unapply接受一个对象从中提取值<br>24.abstract定义抽象类 类层级结构 any anyval anyRef null nothing<br>25.Option抽象类 子类some有值 none没<br>26.特质 实现代码复用，实现接口  trait定义特质 extends with混入类<br>27.定义函数作为某个类或对象的成员，定义为def。。<br>28.头等公民，类型明确函数接收参数、类型、返回结果，值函数的具体实现<br>29.高阶函数 函数包含其他函数作为其参数或返回结果为一个函数<br>30.Foreach 遍历 map映射filter过滤 reduce规约<br>拆分操作partition、groupedby、grouped、sliding<br>31.Spark的特点：运行速度快，容易使用，通用性，运行模式多样<br>32.大数据包括的类型：批量数据处理，交互式查询，流数据处理<br>33、Spark生态系统包含spark core；spark  sql；spark streaming；mlib；graphx</p><p>关于RDD<br>RDD:是弹性分布式数据集,是分布式内存的一个抽象概念，提供了一种高度受限的共享内存模型;<br>DAG:是有向无环图的简称，反映RDD之间的依赖关系<br>阶段:是作业的基本调度单位，一个作业会分为组任务，每组任务被称为“阶段”，或者也被称为“任务集”。<br>分区：RDD内部并行计算的一个计算单元，RDD的数据集在逻辑上被划分为多个分片，每一个分片称为分区。<br>​窄依赖：一个父RDD的分区对应于一个子RDD的分区，或多个父RDD的分区对应于一个子RDD的分区，无shuffle，平行<br>​宽依赖：一个父RDD的一个分区对应一个子RDD的多个分区，有shuffle， 任务</p><p>​行动”( Action )和“转换” ( Transformation )两种类型、前者用于执行计算并指定输出的形式，后者指定RDD之间的相互依赖关系。两类操作的主要区别是转换操作(比如map、filter、 groupBy、join 等)接受RDD并返回RDD而行动操作(比如count、collect等)接受RDD但是返回非RDD (即输出一个值或结果)。</p><p>关于编程<br>1、统计文本文件中单词出现的频率<br>方法一：<br>“Hello world’’<br>‘’hello china’’<br>scala&gt;Val list1=List(“Hello world”,”Hello china”)<br>scala&gt;Val list2=list1.flatmap(s=&gt;s.split(“ ”))<br>H,e,l,l,o , ,w,o,r,l,d  错<br>Hello，world，hello，china对<br>分析：Hello world—-〉s—–〉对s按照空格进行拆分—-〉得到结果<br>List2：List(“Hello”,”world”,”Hello”,”china”)<br>scala&gt;Val list3=list2.map(x=&gt;(x,1))<br>List3:List(&lt;Hello ,1&gt;,&lt;Hello ,1&gt;,&lt;world,1&gt;,&lt;china,1&gt;),reduce麻烦<br>scala&gt;Val list4=list3.groupBy(x=&gt;x.<em>1)<br>Map(Hello-&gt;List(&lt;Hello,1&gt;,&lt;Hello,1&gt;) ,world-&gt;List(&lt;world,1&gt;) ,china-&gt;List(&lt;china,1) )<br>scala&gt;Val list5=list4.map(x=&gt;(x._1,(x._2).size))<br>得到&lt;hello,2&gt;，&lt;world,1&gt;，&lt;china,1&gt;<br>1,2,3,4,5<br>List(1,2,3,4,5).groupBy(x=&gt;x%3)<br>Map(2-&gt;List(2,5), 1-&gt;List(1,4), 0-&gt;List(3))<br>方法二：<br>import java.io.File<br>import scala.io.Source<br>import collection.mutable.Map<br>object WordCount{<br>     def main(args:Array[String]){<br>        val dirfile=new File(“testfiles”)<br>        val files=dirfile.listFile<br>        val results=Map.empty[String,Int]<br>         for(file&lt;-files){<br>           val data=Source.fromFile(file)<br>           val strs=data.getLines.flatMap{s=&gt;s.split(“  “)}<br>           strs foreach{ word=&gt;<br>                   if (results.contains(word))<br>                   results(word)+=1 else results(word)=1<br>                       }   }<br>           results foreach{case (k,v)=&gt;println(s”$k,$v”)}<br>           }   }<br>统计hello world的行数<br>import  org.apache.spark.sparkContext<br>import  org.apache.spark.sparkContext.</em><br>import  org.apache.spark.sparkConf<br>object HelloWorld{<br>   def main (args:Array[String]){<br>   val conf=new SparkConf().setAppName(“Hello World”).setMaster(“local[2]”)<br>val sc=new SparkContext(conf)<br>val fileRDD=sc.textFile(“hdfs://localhost:9000/examplefile”)<br>val filterRDD=fileRDD.filter(_.contains(“Hello World”))<br>filterRDD.cache()<br>filterRDD.count()    }    }</p><p>2、（1） 该系总共有多少学生；<br>val lines = sc.textFile(“file:///usr/local/spark/sparksqldata/Data01.txt”)<br>val par = lines.map(row=&gt;row.split(“,”)(0))<br>val distinct_par = par.distinct() //去重操作<br>distinct_par.count //取得总数<br>（2） 该系共开设来多少门课程；<br>val lines = sc.textFile(“file:///usr/local/spark/sparksqldata/Data01.txt”)<br>val par = lines.map(row=&gt;row.split(“,”)(1))<br>val distinct_par = par.distinct()<br>distinct_par.count<br>（3） Tom 同学的总成绩平均分是多少；<br>val lines = sc.textFile(“file:///usr/local/spark/sparksqldata/Data01.txt”)<br>val pare = lines.filter(row=&gt;row.split(“,”)(0)==”Tom”)<br>pare.foreach(println)<br>Tom,DataBase,26<br>Tom,Algorithm,12<br>Tom,OperatingSystem,16<br>Tom,Python,40<br>Tom,Software,60<br>pare.map(row=&gt;(row.split(“,”)(0),row.split(“,”)(2).toInt)).mapValues(x=&gt;(x,1)).reduceByKey((x,y ) =&gt; (x._1+y._1,x._2 + y._2)).mapValues(x =&gt; (x._1 / x._2)).collect()<br>（4） 求每名同学的选修的课程门数；<br>val lines = sc.textFile(“file:///usr/local/spark/sparksqldata/Data01.txt”)<br>val pare = lines.map(row=&gt;(row.split(“,”)(0),row.split(“,”)(1)))<br>pare.mapValues(x =&gt; (x,1)).reduceByKey((x,y) =&gt; (“ “,x._2 + y._2)).mapValues(x =&gt;<br>x._2).foreach(println)<br>（5） 该系 DataBase 课程共有多少人选修；<br>val lines = sc.textFile(“file:///usr/local/spark/sparksqldata/Data01.txt”)<br>val pare = lines.filter(row=&gt;row.split(“,”)(1)==”DataBase”)<br>pare.count<br>（6） 各门课程的平均分是多少；<br>val lines = sc.textFile(“file:///usr/local/spark/sparksqldata/Data01.txt”)<br>val pare = lines.map(row=&gt;(row.split(“,”)(1),row.split(“,”)(2).toInt))<br>pare.mapValues(x=&gt;(x,1)).reduceByKey((x,y) =&gt; (x._1+y._1,x._2 + y._2)).mapValues(x =&gt; (x._1/ x._2)).collect()<br>（7）使用累加器计算共有多少人选了 DataBase 这门课。<br>val lines = sc.textFile(“file:///usr/local/spark/sparksqldata/Data01.txt”)<br>val pare = lines.filter(row=&gt;row.split(“,”)(1)==”DataBase”).map(row=&gt;(row.split(“,”)(1),1))<br>val accum = sc.longAccumulator(“My Accumulator”)<br>pare.values.foreach(x =&gt; accum.add(x))<br>accum.value </p><p>对于两个输入文件 A 和 B，编写 Spark 独立应用程序，对两个文件进行合并，并剔除其<br>中重复的内容，得到一个新文件 C。<br>（１）假设当前目录为/usr/local/spark/mycode/remdup，在当前目录下新建一个目录 mkdir -p<br>src/main/scala，然后在目录/usr/local/spark/mycode/remdup/src/main/scala 下新建一个<br>remdup.scala，复制下面代码；<br>object RemDup {<br>def main(args: Array[String]) {<br>val conf = new SparkConf().setAppName(“RemDup”)<br>val sc = new SparkContext(conf)<br>val dataFile = “file:///home/charles/data”<br>val data = sc.textFile(dataFile,2)<br>val res = data.filter(_.trim().length&gt;0).map(line=&gt;(line.trim,””)).partitionBy(new<br>HashPartitioner(1)).groupByKey().sortByKey().keys<br>res.saveAsTextFile(“result”) } }<br>（２）在目录/usr/local/spark/mycode/remdup 目录下新建 simple.sbt，复制下面代码：<br>name := “Simple Project”<br>version := “1.0”<br>scalaVersion := “2.11.8”<br>libraryDependencies += “org.apache.spark” %% “spark-core” % “2.1.0”<br>（３）在目录/usr/local/spark/mycode/remdup 下执行下面命令打包程序<br>$ sudo /usr/local/sbt/sbt package<br>（４）最后在目录/usr/local/spark/mycode/remdup 下执行下面命令提交程序<br>$ /usr/local/spark2.0.0/bin/spark-submit –class “RemDup”<br>/usr/local/spark2.0.0/mycode/remdup/target/scala-2.11/simple-project_2.11-1.0.jar<br>（５）在目录/usr/local/spark/mycode/remdup/result 下即可得到结果文件。</p><p>每个输入文件表示班级学生某个学科的成绩，每行内容由两个字段组成，第一个是学生<br>名字，第二个是学生的成绩；编写 Spark 独立应用程序求出所有学生的平均成绩，并输出到一个新文件中。<br>（１）假设当前目录为/usr/local/spark/mycode/avgscore，在当前目录下新建一个目录 mkdir -p<br>src/main/scala，然后在目录/usr/local/spark/mycode/avgscore/src/main/scala 下新建一个<br>avgscore.scala<br>object AvgScore {<br>def main(args: Array[String]) {<br>val conf = new SparkConf().setAppName(“AvgScore”)<br>val sc = new SparkContext(conf)<br>val dataFile = “file:///home/charles/data”<br>val data = sc.textFile(dataFile,3)<br>val res = data.filter(_.trim().length&gt;0).map(line=&gt;(line.split(“ “)(0).trim(),line.split(“<br>“)(1).trim().toInt)).partitionBy(new HashPartitioner(1)).groupByKey().map(x =&gt; {<br>var n = 0<br>var sum = 0.0<br>for(i &lt;- x._2){<br>sum = sum + i<br>n = n +1 }<br>val avg = sum/n<br>val format = f”$avg%1.2f”.toDouble<br>(x._1,format) })<br>res.saveAsTextFile(“result”) } }<br>（２）在目录/usr/local/spark/mycode/avgscore 目录下新建 simple.sbt，复制下面代码：<br>name := “Simple Project”<br>version := “1.0”<br>scalaVersion := “2.11.8”<br>libraryDependencies += “org.apache.spark” %% “spark-core” % “2.1.0”<br>（３）在目录/usr/local/spark/mycode/avgscore 下执行下面命令打包程序<br>$ sudo /usr/local/sbt/sbt package<br>（４）最后在目录/usr/local/spark/mycode/avgscore 下执行下面命令提交程序<br>$ /usr/local/spark2.0.0/bin/spark-submit –class “AvgScore”<br>/usr/local/spark2.0.0/mycode/avgscore/target/scala-2.11/simple-project_2.11-1.0.jar<br>（５）在目录/usr/local/spark/mycode/avgscore/result 下即可得到结果文件。 </p><p>Scala词频统计<br>val list1=List(“Hello world”,”Hello china”)<br>Val list2=list1.flatmap(s=&gt;s.split(“ ”))<br>Val list3=list2.map(s=&gt;(s,1))<br>Val list4=list3.groupBy(x=&gt;x._1)<br>Val list5=list4.map(x=&gt;(x._1,(x._2).size))</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.4v：数据量大、数据类型繁多、处理速度快、价值密度低&lt;br&gt;2.技术层面：数据采集与预处理、数据存储和管理、数据处理和分析、数据可视化、数据安全和隐私保护&lt;br&gt;3.大数据计算模式：批处理mapreduce，流计算storm，图计算pregel，查询分析计算&lt;br&gt;4.</summary>
      
    
    
    
    
    <category term="关于spark的一些基础知识" scheme="http://senye.ink/tags/%E5%85%B3%E4%BA%8Espark%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Maven</title>
    <link href="http://senye.ink/2021/01/17/maven/"/>
    <id>http://senye.ink/2021/01/17/maven/</id>
    <published>2021-01-17T09:10:59.641Z</published>
    <updated>2021-01-17T09:17:21.314Z</updated>
    
    <content type="html"><![CDATA[<p>1、解决依赖管理冲突的原则 路径优先原则 ，相同路径，第一声明者优先原则    。</p><p>2.Maven是Apache下的一个开源项目，它是一个项目管理工具，它用于对java项目进行   项目构建   、    依赖管理  及  项目信息管理     。</p><p>3.一个项目的生理周期构建过程为：清理、编译、测试、报告、打包、部署。 </p><p>4.Maven包含了一个项目对象模型，一组标准集合，一个项目生命周期，一个依赖管理系统，和用来运行定义在生命周期阶段中插件目标的逻辑。</p><p>5.maven管理项目生命周期过程都是基于插件完成的</p><p>6.设置系统环境变量：M2_HOME path环境变量：%M2_HOME%\bin</p><p>7.项目对象模型: 通过pom.xml定义项目的坐标、项目依赖、项目信息、插件目标</p><p>8.项目依赖struts2.3.24，通过在pom.xml中定义依赖即可将struts2的jar包自动加入工程。</p><p>关于简答</p><p>1.简述什么是Maven坐标，由哪些标签组成，分别代表什么，为什么要使用坐标。</p><p>（1）Maven坐标是可以标识平面内的一个点</p><p> 由groupid 定义maven项目的隶属目录</p><p>artifactID 定义实际项目中的一个模块</p><p>version 定义该项目的版本号</p><p>packaging  定义该项目的打包方式</p><p>（坐标决定了Maven的唯一性）</p><p>（2）为什么要使用坐标</p><p>Maven世界中有大量的构建，我们需要用一个唯一标识一个构建的统一规范</p><p>有了统一规范，就可以把查找工作交给机器来做</p><p>2.简述本地仓库与远程仓库的不同。</p><p>本地仓库：一个用户只有一个本地仓库，需要从中央仓库下载，资源存放在本地仓库</p><p>远程仓库：1中央仓库，maven的默认远程仓库</p><p>​       2 .私服，一个特殊的远程仓库，用于在局域网内的仓库</p><p>​                3.镜像：用来替代中央仓库，速度比一般仓库快</p><p>​    </p><p>3.简述Maven的作用和意义。</p><p><strong>–</strong> <strong><em>\</em>拥有约定，知道你的代码在哪里，放到哪里去**</strong></p><p><strong>–</strong> <strong><em>\</em>拥有一个生命周期，例如执行**</strong> <strong><em>\</em>mvn install**</strong> <strong><em>\</em>就可以自动执行编译，测试，打包等构建过程**</strong></p><p><strong>–</strong> <strong><em>\</em>只需要定义一个*****</strong>*pom.xml,*<strong>**</strong>*然后把源码放到默认的目录，**<strong><strong><em>\</em>Maven***</strong></strong>*帮你处理其他事情****</p><p><strong>–</strong> <strong><em>\</em>拥有依赖管理，仓库管理**</strong></p><p>4.Maven项目约定由哪几个目录结构组成，分别存放哪些文件。</p><p>Src/main/java 存放项目的.java文件</p><p>Src/main/resource 存放项目的资源文件</p><p>Src/test/java 存放所有测试.java文件</p><p>Src/test/resource 存放项目的测试资源文件</p><p>Target 项目输出位置</p><p>Pom.xml</p><p>5.三大生命周期</p><p>clean:清理项目</p><p>default：构建项目</p><p>site：生成项目站点的</p><p>6.Maven安装目录分析：</p><p>Bin目录： Maven的运行脚本</p><p>boot目录:Maven自己的类加载器</p><p>conf 目录：含有setting.xml配置文件</p><p>lib ：Maven运行时所需的java类库、</p><p>7.系统报错说没有找到依赖，报错的原因是找不到依赖的Hello项目，HelloFriend中需要调用Hello类，并且在pom.xml中有依赖，但是在库中没有添加进来，所以会报错。故需要将Hello项目的jar包放入仓库中，执行mvn </p><p>Install命令，执行完该命令后再查看仓库，多了cn的文件夹。</p><p>8.scope 用来控制依赖和编译，测试，运行的classpath的关系 </p><p>依赖关系：</p><p>1.compile： 默认编译依赖范围。对于编译，测试，运行三种classpath都有效</p><p>2.test：测试依赖范围。只对于测试classpath有效</p><p>3.provided：已提供依赖范围。对于编译，测试的classpath都有效，但对于运行无效。因为由容器已经提供，例如servlet-api（Tomcat）</p><p>4.runtime:运行时提供。例如:jdbc驱动</p><p>9.Maven项目步骤:</p><p>1 建立Hello项目同时建立Maven约定的项目目录结构</p><p>2 在项目Hello根目录建立pom.xml</p><p>3 在src/main/java/cn/rjxy/maven目录下新建文件Hello.java</p><p>4 在/src/test/java/cn/rjxy/maven目录下新建测文件HelloTest.java</p><p>5 打开cmd命令行，进入Hello项目根目录执行 mvn compile命令，查看根目录变化</p><p> cmd中继续录入mvn clean命令，然后再次查看根目录变化</p><p> cmd中录入mvn clean compile命令，查看根目录变化</p><p> cmd中录入mvn  clean test命令，查看根目录变化</p><p> cmd中录入mvn clean package命令，查看根本录变化</p><p>6新建第二个项目模块hellofriend目录及约定的目录结构</p><p>7在项目hellofriend根目录建立pom.xml</p><p>8在src/main/java/cn/rjxy/maven目录下新建文件hello friend.java</p><p>9在/src/test/java/cn/rjxy/maven目录下新建测试文件hellofriendtest.java</p><p>10 在hellofriend目录下执行命令 mvn package</p><p>11 需要重新构建hello第一个项目并将jar包放入仓库中，在命令行根目录下执行 mvn clean install</p><p>12 重新在hello friend 目录下执行命令mvn package </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1、解决依赖管理冲突的原则 路径优先原则 ，相同路径，第一声明者优先原则    。&lt;/p&gt;
&lt;p&gt;2.Maven是Apache下的一个开源项目，它是一个项目管理工具，它用于对java项目进行   项目构建   、    依赖管理  及  项目信息管理     。&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
    <category term="关于maven的一些基础知识" scheme="http://senye.ink/tags/%E5%85%B3%E4%BA%8Emaven%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>dos</title>
    <link href="http://senye.ink/2020/10/10/lo/"/>
    <id>http://senye.ink/2020/10/10/lo/</id>
    <published>2020-10-10T08:56:07.000Z</published>
    <updated>2020-10-10T09:28:01.081Z</updated>
    
    <content type="html"><![CDATA[<p>用dos命令在桌面创建java并运行[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-J69ZVhZA-1590658049693)(D:\dev\blog\source_posts\lo\dos.png)]</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;用dos命令在桌面创建java并运行[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-J69ZVhZA-1590658049693)(D:\dev\blog\source_posts\lo\dos.png)]&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="dos" scheme="http://senye.ink/tags/dos/"/>
    
  </entry>
  
  <entry>
    <title>初来乍到</title>
    <link href="http://senye.ink/2020/10/06/firstblog-md/"/>
    <id>http://senye.ink/2020/10/06/firstblog-md/</id>
    <published>2020-10-06T11:38:21.769Z</published>
    <updated>2021-01-17T09:10:00.694Z</updated>
    
    <content type="html"><![CDATA[<p>这是我的第一篇博客，同时也是自己用hexo和github搭建的第一个网站，内心无比激动，经过两天断断续续的查csdn与实践，终于，终于，终于到了发表文章这一步了！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这是我的第一篇博客，同时也是自己用hexo和github搭建的第一个网站，内心无比激动，经过两天断断续续的查csdn与实践，终于，终于，终于到了发表文章这一步了！&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="myfirst" scheme="http://senye.ink/tags/myfirst/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://senye.ink/2020/10/05/hello-world/"/>
    <id>http://senye.ink/2020/10/05/hello-world/</id>
    <published>2020-10-05T02:59:33.802Z</published>
    <updated>2020-10-05T02:59:33.802Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
